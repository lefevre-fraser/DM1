#+TITLE: DM1 Week 08 Ponder/Prove
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-06-23 Sat 17:47]
| Headline               |   Time |      |
|------------------------+--------+------|
| *Total time*           | *1:47* |      |
|------------------------+--------+------|
| Exercises              |   1:08 |      |
| \_  LDA                |        | 0:02 |
| \_  SQI                |        | 0:14 |
| \_  LJP                |        | 0:38 |
| \_  YGT                |        | 0:04 |
| \_  LUM                |        | 0:10 |
| Problems               |   0:38 |      |
| \_  SUF                |        | 0:10 |
| \_  LNR                |        | 0:06 |
| \_  LDO                |        | 0:04 |
| \_  YCF                |        | 0:11 |
| \_  YZU                |        | 0:07 |
| Identify Collaborators |   0:01 |      |
#+END:

* Exercises
** DONE LDA
   CLOSED: [2018-06-23 Sat 00:02]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:00]--[2018-06-23 Sat 00:02] =>  0:02
   :END:
#+begin_note
  Alter the following =let= expression so that it creates the same list using
  =cons= rather than =list=.

#+BEGIN_SRC elisp :results raw
  (let ((a 1) (b 2) (c 3) (d 4))
    (list (+ a b) (/ d b) (- d a) (* c d)))
#+END_SRC

#+RESULTS:
(3 2 3 12)

#+end_note
#+begin_info
 (let ((a 1) (b 2) (c 3) (d 4))
   (cons (+ a b) (cons (/ d b) (cons (- d a) (cons (* c d) nil)))))
(3 2 3 12)
#+end_info
** DONE SQI
   CLOSED: [2018-06-23 Sat 00:16]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:02]--[2018-06-23 Sat 00:16] =>  0:14
   :END:
#+begin_note
  Use =cons= to re-implement the =morphifyr= function more efficiently.

(defun morphify (fun lst)
  (loop for item in lst
        collect (funcall fun item)))
#+end_note
#+begin_info
(defun cons-morphify (fun lst)
  (if (= (length lst) 1)
    (cons (funcall fun (car lst)) nil)
    (cons (funcall fun (car lst)) (cons-morphify fun (cdr lst)))))

(cons-morphify 'downcase '("THIS" "IS" "TOO" "LOUD"))

("this" "is" "too" "loud")
#+end_info
** DONE LJP
   CLOSED: [2018-06-23 Sat 01:48]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 01:10]--[2018-06-23 Sat 01:48] =>  0:38
   :END:
#+begin_note
  Use =car=, =cdr=, and =cons= to re-implement the =prime-list-from-rle-list=
  function more efficiently.
:HINT:
  - Hint :: Think recursion. There are four cases to handle, the base case being
            when the passed-in rle-list is null.
:END:
#+end_note
(defun prime-list-from-rle-list (rle-list limit)
  (mapcar 'first
          (remove-if
           (lambda (x)
             (zerop (second x)))
           (mapcar* 'list
                    (number-sequence 2 limit)
                    (apply 'append
                           (mapcar (lambda (x)
                                     (if (> x 1)
                                         (make-list x 0)
                                       (list x)))
                                   rle-list))))))

(require 'first-ten-million-primes)
(elt first-ten-million-primes 9999999)
(setq limit (elt first-ten-million-primes 9999999)
      p100rle (list 1 1 0 1 0 1 3 1 0 1 3 1 0 1 3 1 5 1 0 1 5 1 3 1 0 1 3 1 5 1 5 1 0 1 5 1 3 1 0 1 5 1 3 1 5 1 7 1 3)
      result (prime-list-from-rle-list p100rle limit))

(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)
#+begin_info
(setq p100rle (list 1 1 0 1 0 1 3 1 0 1 3 1 0 1 3 1 5 1 0 1 5 1 3 1 0 1 3 1 5 1 5 1 0 1 5 1 3 1 0 1 5 1 3 1 5 1 7 1 3))

(defun prime-list-from-rle-list (start rle-list)
  (cond ((null rle-list) nil)
        ((zerop (car rle-list)) (prime-list-from-rle-list (+ start 1) (cdr rle-list)))
        ((= 1 (car rle-list)) (cons start (prime-list-from-rle-list (+ start 1) (cdr rle-list))))
        (t (prime-list-from-rle-list (+ start (car rle-list)) (cdr rle-list)))))

"Start value is initialized with the first prime number"
(prime-list-from-rle-list 2 p100rle)

(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)
#+end_info
** DONE YGT
   CLOSED: [2018-06-23 Sat 00:20]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:16]--[2018-06-23 Sat 00:20] =>  0:04
   :END:
#+begin_note
  Construct a binary search tree from the *words* (not the letters) of the phrase

: time flies on wings of lightning

  using dictionary order, inserting words in the order they appear in the
  phrase. Don\rsquo{}t try to balance the tree (see below).

  What is the *height* of this tree?
#+end_note
#+begin_info
:            time
:            /  \
:        flies  wings
:            \       
:            on      
:            /
:           of
:          / 
:      lightning


The height of the tree is 5.
#+end_info
** DONE LUM
   CLOSED: [2018-06-23 Sat 00:34]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:24]--[2018-06-23 Sat 00:34] =>  0:10
   :END:
#+begin_note
  Which of the above balanced BSTs is represented by the following list?
#+BEGIN_SRC elisp :results silent
  (so (cool (are (and) (binary)) (search (kind))) (trees (the) (wonderfully)))))
#+END_SRC
#+end_note
#+BEGIN_SRC elisp
  (cons '(so (cool (are (and) (binary)) (search (kind))) (trees (the) (wonderfully))) nil)
#+END_SRC

#+RESULTS:
| so | (cool (are (and) (binary)) (search (kind))) | (trees (the) (wonderfully)) |

#+begin_info
This is the Binary tree that matches above list.
:                         so
:                  +-------+--------+
:                cool              trees
:        +---------+-------+         +-------------+
:       are              search     the       wonderfully
:  +-----+------+      +----+             
: and         binary  kind
#+end_info
* Problems
  No optional problems this week.
** DONE SUF
   CLOSED: [2018-06-23 Sat 00:45]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:34]--[2018-06-23 Sat 00:44] =>  0:10
   :END:
#+begin_note
  How would you write (using map /not/ a loop) an elisp function
  =number-of-factors= that takes the CSF of a positive integer (in
  list-of-dotted-pairs form) and returns how many factors that integer has?

#+BEGIN_SRC elisp
  (defun number-of-factors (csf)
    "Takes a CSF like '((2 . 3) (3 . 1) (5 . 2)) and returns 24."
    ;; ... your ONE line of code goes here
    )
#+END_SRC
#+end_note
#+begin_info
This is how I would write the elisp function:

(defun number-of-factors (csf)
  "Takes a CSF like '((2 . 3) (3 . 1) (5 . 2)) and returns 24."
  ;; ... your ONE line of code goes here
  (apply '* (mapcar '(lambda (x) (1+ (cdr x))) csf))
  )

(number-of-factors '((2 . 3) (3 . 1) (5 . 2)))
24

(number-of-factors '((2 . 3) (3 . 1) (5 . 2) (6 . 5)))
144
#+end_info
** DONE LNR
   CLOSED: [2018-06-23 Sat 00:51]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 00:45]--[2018-06-23 Sat 00:51] =>  0:06
   :END:
#+begin_note
  How would you write (using map /not/ a loop) another elisp function
  =number-of-factors-alt= that takes the CSF of a positive integer (in
  vector-of-two-element-lists form) and returns how many factors that integer
  has?

#+BEGIN_SRC elisp
  (defun number-of-factors-alt (csf)
    "Takes a CSF like [(2 3) (3 1) (5 2)] and returns 24."
    ;; ... your ONE line of code goes here
    )
#+END_SRC
#+end_note
#+begin_info
This is how I would write the alternate number-of-factors version.

(defun number-of-factors-alt (csf)
  "Takes a CSF like [(2 3) (3 1) (5 2)] and returns 24."
  ;; ... your ONE line of code goes here
  (apply '* (mapcar '(lambda (x) (1+ (elt x 1))) csf))
  )

(number-of-factors-alt [(2 3) (3 1) (5 2)])
24

(number-of-factors-alt [(2 3) (3 1) (5 2) (6 5)])
144
#+end_info
** DONE LDO
   CLOSED: [2018-06-23 Sat 09:06]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 09:02]--[2018-06-23 Sat 09:06] =>  0:04
   :END:
#+begin_note
  Investigate what must happen to delete a key from a BST. Is deletion always as
  fast as insertion?
#+end_note
#+begin_info
In order to delete a node, you must check if it has children.
there is a different process for if it has 0, 1, or 2.

Depending on how the deletion is implimented it can happen
quicker or slower.

If we are trying to delete a node with children,
then deletion can take longer than insertion.
#+end_info
** DONE YCF
   CLOSED: [2018-06-23 Sat 17:39]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 17:29]--[2018-06-23 Sat 17:39] =>  0:10
   CLOCK: [2018-06-23 Sat 09:13]--[2018-06-23 Sat 09:14] =>  0:01
   :END:
#+begin_note
  Compare and contrast the different nuances in the precise definitions of the
  terms *full*, *complete* and *balanced* used to describe trees.
#+end_note
#+begin_info
Full:
A full binary tree is a tree where every node has 
two children except the last level which should be
made up of only leaves.
Example:
:                  right
:                  /    \
:              and        so
:             /   \     /   \
:           abe   as  seen   zeebra

Complete:
In a complete tree all levels of the tree
are completely filled out, except possibly
the last is completely filled, and the last
layer must be filled from left to right.
Example:
:                  right
:                  /    \
:              and        so
:             /   \     /   
:           abe   as  seen   

Balanced:
A balanced tree is one whose nodes
have balance factors of either 1, 0, or -1.
These numbers are a calcutlation based
off the height of a node's left pointer,
and the node's right pointer.

#+end_info
** DONE YZU
   CLOSED: [2018-06-23 Sat 17:46]
   :LOGBOOK:
   CLOCK: [2018-06-23 Sat 17:39]--[2018-06-23 Sat 17:46] =>  0:07
   :END:
#+begin_note
  Investigate various techniques to rebuild unbalanced BSTs to make them
  balanced. Note that this rebuilding can happen on-the-fly (as items are
  inserted) or at-the-end (after all initial items are inserted).
#+end_note
#+begin_info
One technique for balancing a BST is the insertion module
used by AVL trees.
The operations are as follows:
Sinlge Rotation:
Right or
Left
Double Rotation:
Right-Left or
Left-Right

This technique is used for balancing a
BST "on-the-fly."
But, it could also be used for balancing it 
once all items were inserted. It would probably
take longer to do it this way, but that just
depends on the insertion order of the items.
#+end_info
* Puzzles
  No puzzles this week.
* DONE Identify Collaborators
  CLOSED: [2018-06-23 Sat 01:49]
  :LOGBOOK:
  CLOCK: [2018-06-23 Sat 01:48]--[2018-06-23 Sat 01:49] =>  0:01
  :END:
  Identify your collaborators and the contribution of each, in the following way:

  - Tyler Elkington :: Worked with me on LJP and LNR and YZU
