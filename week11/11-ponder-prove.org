#+TITLE: DM1 Week 11 Ponder/Prove
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-07-14 Sat 23:32]
| Headline               |   Time |      |
|------------------------+--------+------|
| *Total time*           | *2:36* |      |
|------------------------+--------+------|
| Exercises              |   1:03 |      |
| \_  HAX                |        | 0:10 |
| \_  HKE                |        | 0:05 |
| \_  KBB                |        | 0:05 |
| \_  HRL                |        | 0:37 |
| \_  KHO                |        | 0:01 |
| \_  HLX                |        | 0:01 |
| \_  HBE                |        | 0:04 |
| Problems               |   0:57 |      |
| \_  HJS                |        | 0:10 |
| \_  KHQ                |        | 0:01 |
| \_  KSI                |        | 0:31 |
| \_  KSQ                |        | 0:15 |
| Puzzles                |   0:35 |      |
| \_  HTR                |        | 0:35 |
| Identify Collaborators |   0:01 |      |
#+END:

* Exercises
** DONE HAX
   CLOSED: [2018-07-14 Sat 18:20]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 18:10]--[2018-07-14 Sat 18:20] =>  0:10
   :END:
#+begin_note
  What are /m/ and /n/ for the three /K_{m,n}/ graphs in figures 87, 88 and 89,
  in VWQ?
#+end_note
#+begin_info
  Figure 87 is a K_1,2
  Figure 88 is a K_3,3
  Figure 89 is a K_3,4
#+end_info
** DONE HKE
   CLOSED: [2018-07-14 Sat 22:44]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 22:39]--[2018-07-14 Sat 22:44] =>  0:05
   :END:
#+begin_note
  Investigate bipartite graphs and complete bipartite graphs. What kinds of
  applications fit these types of graphs?
#+end_note
#+begin_info
  An example of a bipartite graph could be a sports leage. A link connects a
  player to every team that he has played for.

  Another example could be bus route optimizing. The input is a schedule of the
  buses and their stops. We would have to find a set of bus stops as small as
  possible, so that every bus visits at least one of the chosen stops.
#+end_info
** DONE KBB
   CLOSED: [2018-07-14 Sat 22:47]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 22:45]--[2018-07-14 Sat 22:47] =>  0:02
   CLOCK: [2018-07-14 Sat 18:26]--[2018-07-14 Sat 18:29] =>  0:03
   :END:
#+begin_note
  What would a /tri/-partite graph look like? An /n/-partite graph?
#+end_note
#+begin_info
  Since a bipartite graph consist of 2 levels of nodes, a tripartite graph
  will consist of 3 levels of nodes. An /n/-partite graph will continue
  to consist of n levels of nodes.
#+end_info
** DONE HRL
   CLOSED: [2018-07-14 Sat 19:32]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 18:55]--[2018-07-14 Sat 19:32] =>  0:37
   :END:
#+begin_note
  Draw this small graph having 8 nodes and 13 links:

: pq pn qn pt qt et dt de me mn mc cd cn
:HINT:
  - Hint :: To draw this graph neatly, think Argyle!
:END:
#+end_note
#+begin_info
  3 connections to p
  3 to q
  3 to e
  3 to m
  3 to c
  3 to d
  4 to t
  4 to n
[[file:../img/8node13link.png]]
#+end_info
** DONE KHO
   CLOSED: [2018-07-14 Sat 22:54]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 22:54]--[2018-07-14 Sat 22:55] =>  0:01
   :END:
#+begin_note
  Describe /H/ in terms of subsets of /G/ if /G/ = =[[a b c d e f g h i j]
             [[a b] [a c] [a g] [b d] [b f] [b e] [c d] [c f] [c g] [c h]=
              =[d e] [d g] [d h] [e i] [e j] [f i] [g h] [h i] [i j]]]=.

  Graph /H/ is shown in figure 93 in VWS.
#+end_note
#+begin_info
  a: b \rightarrow c \rightarrow g
  b: d \rightarrow f \rightarrow e
  c: d \rightarrow f \rightarrow g \rightarrow h
  d: e \rightarrow g \rightarrow h
  e: i \rightarrow j
  f: i
  g: h
  h: i
  i: j
  j:

  H = {[a b],
      [a c],
      [a g],
      [b d],
      [b f],
      [b e],
      [c d],
      [c f],
      [c g],
      [c h],
      [d e],
      [d g],
      [d h],
      [e i],
      [e j],
      [f i],
      [g h],
      [h i],
      [i j]}
#+end_info
** DONE HLX
   CLOSED: [2018-07-14 Sat 22:57]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 22:55]--[2018-07-14 Sat 22:56] =>  0:01
   :END:
#+begin_note
  Since graphs are defined in terms of sets, define *graph intersection*
  accordingly. Give an example.
#+end_note
#+begin_info
  Graph intersection can be considered of having multiple graphs found
  within another graph, or in other words, having a subgraph. An example
  of this could be K_5 and C_5 being its subgraph.
#+end_info
** DONE HBE
   CLOSED: [2018-07-14 Sat 19:40]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 19:36]--[2018-07-14 Sat 19:40] =>  0:04
   :END:
#+begin_note
  A *planar graph* is a graph that can be embedded in the plane, i.e., it can be
  drawn on the plane in such a way that its links intersect only at their
  endpoints. In other words, it can be drawn in such a way that no link lines
  cross each other.

  True or false, the RSA graph is a planar graph.
:HINT:
  - Hint :: To save you the trouble of searching, the RSA graph is shown in VWB.
            Also, look at the K_4 graph(s) in VWM before leaping to an erroneous
            conclusion! (The key phrase is \ldquo{}*can* be drawn\rdquo.)
:END:
#+end_note
#+begin_info
  True:
:     c - m    
:    / \ / \ 
:   /   n   \
:  |   / \   |
:  |  p   q  |
:  |   \ /   |    
:   \   t   / 
:    \ / \ / 
:     d   e
#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** DONE HJS
   CLOSED: [2018-07-14 Sat 20:54]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 20:43]--[2018-07-14 Sat 20:53] =>  0:10
   :END:
#+begin_note
  /Q_n/ graphs have /2^n/ nodes. How many links do /Q_n/ graphs have?
:HINT:
  The answer is a non-trivial function of /n/.
:END:
#+end_note
#+begin_info
  The funtion representing the number of links in Q_n graphs is:
  2^(n-1)n

  In lisp:
  (defun qn-links (n)
    (* (expt 2 (1- n)) n))

  (qn-links 3)12
  (qn-links 2)4
#+end_info
** DONE KHQ
   CLOSED: [2018-07-14 Sat 22:58]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 22:57]--[2018-07-14 Sat 22:58] =>  0:01
   :END:
#+begin_note
  In what sense is a /K_{3,3}/ like a /K_5/?
:HINT:
 - Hint :: The latter was said to come last but not least above --- but it /is/
           least in this sense.
:END:
#+end_note
#+begin_info
  /K_{3,3}/ is like a /K_5/ graph, because they are both not planar. This
  means that the links cannot be redrawn without none of them overlapping.
#+end_info
** TODO AGD *
#+begin_note
  The following code creates adjacency lists. Try it out on the
  =graph-11-27-links= list. Add to this code the functionality necessary to
  building the above adjacency-list table. (Search for \ldquo{}In adjacency-list form:\rdquo
  in VWR.)

#+BEGIN_SRC emacs-lisp :results silent
  (defun make-adjacency-list (node links)
    "Make the adjacency list of a node by collecting
  all the nodes it's connected to in links."
    (loop for link in links
          if (= node (car link))
          collect (cdr link)))

  (defun make-adjacency-list-in-reverse (node links)
    "Make the reverse adjacency list of a node by collecting
  all the nodes connected to it in links."
    (loop for link in links
          if (= node (cdr link))
          collect (car link)))

  (defun make-adjacency-lists (nodes links)
    "Make adjacency lists given a graph's nodes and links
  by collecting the adjacency lists and reverse adjacency lists
  for each of the graph's nodes, removing any duplicates found."
    (let ((alists nil) the-nodes-alist)
      (loop for node in nodes
            do (setq the-nodes-alist
                     (remove-duplicates
                      (nconc (make-adjacency-list node links)
                             (make-adjacency-list-in-reverse node links)))
                     alists (nconc alists (list (cons node the-nodes-alist)))))
      alists))
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO HSG *
#+begin_note
  Write the code to =make-adjacency-matrix= given a graph\rsquo{}s nodes and links.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO ANA *
#+begin_note
  Armed with a knowledge of what complete graphs (the K_n) are, and what
  subgraphs and graph representations are, you are ready to apply that
  knowledge.

  Another name for a complete graph is a word that in high school is often
  mispronounced as /click/. Making it rhyme with the second syllable of the
  words /antique/ or /technique/ is the correct way to pronounce /clique/.

  Think about how to /verify/ this graph property.

  To give an operational definition, a clique is a subgraph of a given graph in
  which every two nodes are connected by a link. An /anti/-clique is a subgraph
  in which every two nodes are /not/ connected by a link. (Note that this is the
  same as saying that /no/ two nodes in this subgraph are connected. Or in other
  words, they form an /independent set/ of nodes --- nodes that are all
  independent of each other.) Searching through a specified graph, a verifier
  would check the alleged "clique-ness" or "anti-clique-ness" of a given list of
  nodes.

  Use the code below as a starting point. Decide how to represent a graph. Use
  the =link-exists= predicate as is, or change it to suit. If you decide as is
  is good enough, you will still need to implement the =get-adjacency-list=
  function. Test several graphs and various-sized candidate node lists using a
  suitably implemented =check-clique-or-anti-clique= function.

#+BEGIN_SRC emacs-lisp
  (defun link-exists (graph-representation node1 node2)
    "Given a graph representation, is there a link between node1 and node2?"
    (not
     (null
      (or
       (member node2 (get-adjacency-list graph-representation node1))
       (member node1 (get-adjacency-list graph-representation node2))))))

  (defun check-clique-or-anti-clique (graph-representation nodes anti)
    "Checks if the represented graph contains a subgraph consisting of
  the given nodes that is a clique (if anti is nil) or an anti-clique
  (if anti is t). Returns t or nil appropriately."
     ;; ... your code goes here
    )
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE KSI
   CLOSED: [2018-07-14 Sat 23:31]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 23:00]--[2018-07-14 Sat 23:31] =>  0:31
   :END:
#+begin_note
  Not to be confused with *graph intersection*, the *intersection graph* of a
  collection of sets A_1, A_2, \dots, A_n is the graph that has a node for each of
  these sets and has a link connecting the nodes representing two sets if these
  sets have a nonempty intersection.

  Construct the intersection graph of this collection of five sets:

  | Set Name | Set Elements       |
  |----------+--------------------|
  | A_1       | [-4 -3 -2 -1 0]    |
  | A_2       | [-2 -1 0 1 2]      |
  | A_3       | [-6 -4 -2 0 2 4 6] |
  | A_4       | [-5 -3 -1 1 3 5]   |
  | A_5       | [-6 -3 0 3 6]      |

  Draw this graph. What is its degree sequence?
#+end_note
#+begin_info
  [[file:../img/intersection.png]]

  The degree sequence is:
  [4 4 4 3 3]
#+end_info
** DONE KSQ
   CLOSED: [2018-07-14 Sat 21:53]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 21:35]--[2018-07-14 Sat 21:50] =>  0:15
   :END:
#+begin_note
  Construct a graph using the following list of eight words as node labels:

: dine done gone tine tone wind wine wins

  Link two nodes if they differ in only one letter /in the same position/ (e.g.,
  =wind= and =wins= differ in the fourth letter only, so that defines a link.
  But =dine= and =tone= differ in the first /and/ second letters, so no link
  there).

  Randomly select two nodes of this graph. What is the probability that there is
  a link between those two nodes?
#+end_note
#+begin_info
  [[file:../img/wordgame.png]]

  (defun num-comb (n k)
    (if (= k 1)
      (+ (- n k) 1)
      (/ (* n (num-comb (1- n) (1- k))) k)))

  (num-comb 8 2)28
  
  There are 28 total possibilities

  There are 10 combinations that result in 
  a link between two randommly chosen nodes

  The probability then that there is a link 
  between the two nodes is:

  (/ 10.0 28)0.35714285714285715
  That's roughly 35.71%
  
#+end_info
** TODO KSC *
#+begin_note
  Generalizing, the Ramsey function /R/ with two parameters, /R(i, j)/, returns
  the minimum /n/ for which in a /K_n/ graph where the links are colored with
  two colors, there must exist either an embedded /K_i/ subgraph whose links are
  all of the first color, or an embedded /K_j/ subgraph whose links are all of
  the second color. As is fairly easily shown, /R(3, 3) = 6/. Many others of
  these so-called /Ramsey numbers/ are known and are provable, e.g., /R(4, 4) =
  18/ and /R(4, 5) = 25/, but most are not. For example, it is known that
  [[R(5, 5) is at least
   43][R(5, 5) is at least 43]] and at most 48, but which number between 43 and 48
  is the exact value is unknown. Why is that? Research and describe why we are
  currently unable to nail this value down.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
* Puzzles
  Puzzle, to be precise.
** DONE HTR
   CLOSED: [2018-07-14 Sat 22:30]
   :LOGBOOK:
   CLOCK: [2018-07-14 Sat 21:55]--[2018-07-14 Sat 22:30] =>  0:35
   :END:
#+begin_note
  What does it mean to say that \({\sf VWX}\) has
: ([2 1 1] [2 2 2 1 1] [4 1 1 1 1])
  as its list of degree sequences?
#+end_note
*** Rephrase
    How can VWX be categorized as having a 
    degree sequence of:
    [2 1 1] [2 2 2 1 1] [4 1 1 1 1]
*** Approach
    Look at all the subsections of VWX
    This yielded no result
    
    Look at the letters of VWX themselves
*** Solution
    The letters of VWX can be represented as a graph
*** Proof

: 1   1  1   2   1  1   1
:  \ /    \ / \ /    \ / 
:   2      2   2      4  
:                    / \ 
:                   1   1

* DONE Identify Collaborators
  CLOSED: [2018-07-14 Sat 22:31]
  :LOGBOOK:
  CLOCK: [2018-07-14 Sat 22:30]--[2018-07-14 Sat 22:31] =>  0:01
  :END:
  Identify your collaborators and the contribution of each, in the following way:

  - Tyler Elkins :: Helped me with some Exercises, Problems, and the Puzzle 
                    
