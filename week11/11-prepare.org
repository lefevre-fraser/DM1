#+TITLE: DM1 Week 11 Prepare
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
* TODO Read section THR subsections VWP through VWW from [[https://rickneff.github.io/metaphors-be-with-you.html][The Book]].
* TODO Study the Traveling Salesperson Problem 
   Here, for python fans everywhere, is [[https://github.com/norvig/pytudes/blob/master/ipynb/TSP.ipynb][a \ldquo{}pytude\rdquo]] by Peter Norvig,
   Director of Research for Google.

** TODO Study the gist of it
   Given a list of cities and the distances between them, what tour through all
   the cities that returns to the starting city is the shortest?

*** Simple to State, Hard to Solve

  The simplicity of the statement of the TSP masks its complexity. But its
  complexity must be dealt with, as the TSP is useful in many real world
  applications:
   - Route Optimization
   - Manufacturing
   - Astronomy
   - And more...

*** An Approach
  The brute force approach is both simple and straightforward:

  1. produce every permutation of cities
  2. for each permutation, create a circuit by joining the last node to the first node
  3. calculate each circuit\rsquo{}s distance
  4. return the circuit with the shortest distance

  The problem with this approach is \ldquo{}combinatorial explosion\rdquo --- how quickly
  the number of permutations grows!
  
** TODO Study the following code
#+BEGIN_SRC elisp :results silent
  (require 'cl)
  (require 'dash)

  (defun TSP-solver (distance-matrix)
     (let* ((num-cities (length distance-matrix))
            (cities (number-sequence 1 num-cities))
            (permutations (-permutations cities))
            (results (mapcar
                      (lambda (perm)
                        (cons
                         (apply '+ (mapcar (lambda (city)
                                             (dist (nth (1- city) perm)
                                                   (nth (mod city num-cities) perm)
                                                   distance-matrix))
                                           cities))
                         perm))
                      permutations)))
       (assoc (apply 'min (mapcar 'car results)) results)))

  (defun dist (i j d-matrix)
    (elt (elt d-matrix (1- i)) (1- j)))

  (defun build-cities-coords (n width height seed)
     (random seed)
     (loop repeat n collect (cons (random width) (random height))))

   (defun build-distance-matrix (cities-coords)
     (apply 'vector
            (mapcar (lambda (c1)
                      (apply 'vector
                             (mapcar (lambda (c2)
                                       (distance c1 c2))
                                     cities-coords)))
                    cities-coords)))
#+END_SRC

