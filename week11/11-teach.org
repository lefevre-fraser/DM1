#+TITLE: DM1 Week 11 Teach
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-07-12 Thu 23:59]
| Headline                | Time   |      |
|-------------------------+--------+------|
| *Total time*            | *0:50* |      |
|-------------------------+--------+------|
| Supply and Test         | 0:50   |      |
| \_  Heed Hint           |        | 0:01 |
| \_  Enjoy a Bonus!      |        | 0:01 |
| \_  Go above and beyond |        | 0:47 |
#+END:

* DONE Supply and Test            
  CLOSED: [2018-07-12 Thu 13:32]
  :PROPERTIES:
  :CRYPTKEY: dm1teach11
  :END:
  :LOGBOOK:
  CLOCK: [2018-07-12 Thu 13:30]--[2018-07-12 Thu 13:31] =>  0:01
  :END:
  The only function definition missing from the above code block is =distance=.

  After your group discussion, supply this missing function so that you can
  evaluate the following block to test this =TSP-solver=:

#+BEGIN_SRC elisp :results silent
  (require 'cl)
  (require 'dash)

  (defun TSP-solver (distance-matrix)
     (let* ((num-cities (length distance-matrix))
            (cities (number-sequence 1 num-cities))
            (permutations (-permutations cities))
            (results (mapcar
                      (lambda (perm)
                        (cons
                         (apply '+ (mapcar (lambda (city)
                                             (dist (nth (1- city) perm)
                                                   (nth (mod city num-cities) perm)
                                                   distance-matrix))
                                           cities))
                         perm))
                      permutations)))
       (assoc (apply 'min (mapcar 'car results)) results)))

  (defun dist (i j d-matrix)
    (elt (elt d-matrix (1- i)) (1- j)))

  (defun build-cities-coords (n width height seed)
     (random seed)
     (loop repeat n collect (cons (random width) (random height))))

   (defun build-distance-matrix (cities-coords)
     (apply 'vector
            (mapcar (lambda (c1)
                      (apply 'vector
                             (mapcar (lambda (c2)
                                       (distance c1 c2))
                                     cities-coords)))
                    cities-coords)))
#+END_SRC


#+BEGIN_SRC elisp :results raw
  (setq cities-coords-20 (build-cities-coords 20 900 600 "twentysomething")
        cities-coords (subseq cities-coords-20 0 9) ;; change 9 to a smaller integer (> 3) to save time
        start (float-time)
        results (TSP-solver (build-distance-matrix cities-coords))
        timed-results (cons (- (float-time) start) results))
#+END_SRC

#+RESULTS:
(4.113947868347168 2083.567653450519 1 6 4 3 5 9 7 2 8)

#+BEGIN_SRC elisp
  (defun distance (c1 c2)
    (sqrt (+ (expt (- (car c1) (car c2)) 2) (expt (- (cdr c1) (cdr c2)) 2))))
#+END_SRC

#+RESULTS:
: distance

** DONE Heed Hint
   CLOSED: [2018-07-12 Thu 13:29]
   :LOGBOOK:
   CLOCK: [2018-07-12 Thu 13:28]--[2018-07-12 Thu 13:29] =>  0:01
   :END:
  You may find this python code helpful:

#+BEGIN_SRC python :results output
  from math import sqrt

  class City:
    def __init__(self, x, y):
      self.x = x
      self.y = y

  def distance(c1, c2):
    return sqrt((c1.x - c2.x)**2 + (c1.y - c2.y)**2)

  print distance(City(300, 270), City(450, 109))
#+END_SRC

#+RESULTS:
  
  This code, borrowed from Norvig\rsquo{}s pytude, may also come in handy:
#+BEGIN_SRC python :results file
  import matplotlib.pyplot as plt

  def plot_tour(tour):
      "Plot the cities as circles and the tour as lines between them."
      plot_lines(list(tour) + [tour[0]])

  def plot_lines(points, style='bo-'):
      "Plot lines to connect a series of points."
      plt.plot([p.real for p in points], [p.imag for p in points], style)
      plt.axis('scaled')
      plt.axis('off')

  plot_tour(((6+546j),
   (199+147j),
   (350+65j),
   (737+26j),
   (847+187j),
   (891+465j),
   (554+374j),
   (505+548j)))

  plt.savefig('pyplot-tour.png')
  return 'pyplot-tour.png'
#+END_SRC

#+RESULTS:
[[file:]]

** DONE Enjoy a Bonus!
   CLOSED: [2018-07-12 Thu 13:30]
   :LOGBOOK:
   CLOCK: [2018-07-12 Thu 13:29]--[2018-07-12 Thu 13:30] =>  0:01
   :END:
   Graphics are always good for helping us visualize problem results. The bonus
   is found in the interaction between org-mode-enabled elisp code and python
   code!

#+BEGIN_SRC elisp :results value
  (setq winning-tour (cdr results) 
        coords (mapcar (lambda (i)
                         (let ((city (nth (1- i) cities-coords)))
                           (list (car city) (cdr city))))
                        winning-tour))
#+END_SRC

  In the table produced by evaluating the above code block, replace \ldquo{}#+RESULTS\rdquo
  with \ldquo{}#+name: points-to-plot\rdquo so that evaluating the following code block will
  work.

#+BEGIN_SRC python :var pts=points-to-plot :results file
  import matplotlib.pyplot as plt

  def plot_tour(tour):
      "Plot the cities as circles and the tour as lines between them."
      plot_lines(tour + [tour[0]])

  def plot_lines(points, style='bo-'):
      "Plot lines to connect a series of points."
      plt.plot([p[0] for p in points], [p[1] for p in points], style)

  plot_tour(pts)
  plt.savefig('pyplot-tour.png')
  return 'pyplot-tour.png'
#+END_SRC

** TODO Go above and beyond
   :LOGBOOK:
   CLOCK: [2018-07-12 Thu 14:10]--[2018-07-12 Thu 14:57] =>  0:47
   :END:
  To show you *really understand* this brute-force algorithm, write four new
  functions corresponding to the four steps outlined above, such that the
  following code block will evaluate:

#+BEGIN_SRC elisp :results silent
  (defun distance (c1 c2)
    (sqrt (+ (expt (- (car c1) (car c2)) 2) (expt (- (cdr c1) (cdr c2)) 2))))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (require 'dash)

  (defun produce-every-permutation-of-cities (distance-matrix)
    (setq num-cities (length distance-matrix)
          cities (number-sequence 1 num-cities)
          permutations (-permutations cities)))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun create-circuit-for-each-permutation (permutations)
    (setq circuits (mapcar
                     (lambda (perm)
                       (cons
                         (mapcar (lambda (city)
                                   (dist (nth (1- city) perm)
                                         (nth (mod city num-cities) perm)
                                         distance-matrix))
                                 cities)
                         perm))
                   permutations)))
   ;; (setq results (mapcar
     ;;               (lambda (perm)
       ;;               (cons
         ;;               (apply '+ (mapcar (lambda (city)
           ;;                                 (dist (nth (1- city) perm)
             ;;                                     (nth (mod city num-cities) perm)
               ;;                                   distance-matrix))
                 ;;                         cities))
                   ;;     perm))
                    ;;permutations)))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun calculate-circuit-distances (circuits permutations)
    (setq results (cons (apply '+ (car circuits)) (cdr circuits))))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun find-circuit-with-shortest-distance (results)
    (assoc (apply 'min (mapcar 'car results)) results))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun dist (i j d-matrix)
    (elt (elt d-matrix (1- i)) (1- j)))

  (defun build-cities-coords (n width height seed)
    (random seed)
    (loop repeat n collect (cons (random width) (random height))))

  (defun build-distance-matrix (cities-coords)
     (apply 'vector
            (mapcar (lambda (c1)
                      (apply 'vector
                             (mapcar (lambda (c2)
                                       (distance c1 c2))
                                     cities-coords)))
                    cities-coords)))
  (setq cities-coords-20 (build-cities-coords 20 900 600 "twentysomething")
        cities-coords (subseq cities-coords-20 0 9)) ;; change 9 to a smaller integer (> 3) to save time

#+END_SRC

#+BEGIN_SRC elisp :results raw
  (setq distance-matrix (build-distance-matrix cities-coords)
        step-1-results (produce-every-permutation-of-cities distance-matrix)
        step-2-results (create-circuit-for-each-permutation step-1-results)
        step-3-results (calculate-circuit-distances step-2-results step-1-results)
        step-4-results (find-circuit-with-shortest-distance step-3-results))
#+END_SRC

#+RESULTS:
(2083.567653450519 1 6 4 3 5 9 7 2 8)

  All the code you need is found in the =TSP-solver= function. You only need to
  reorganize it!
  
