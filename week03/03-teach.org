#+TITLE: DM1 Week 03 Teach
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-05-18 Fri 13:18]
| Headline         | Time   |
|------------------+--------|
| *Total time*     | *0:12* |
|------------------+--------|
| Compare/Contrast | 0:12   |
#+END:

* DONE Compare/Contrast
  CLOSED: [2018-05-18 Fri 13:17]
  :PROPERTIES:
  :CRYPTKEY: dm1teach03
  :END:
  :LOGBOOK:
  CLOCK: [2018-05-18 Fri 13:05]--[2018-05-18 Fri 13:17] =>  0:12
  :END:
  Recall the /polygon circumscribing/ (AKA /limiting radius/) problem? The
  limiting radius (r_\infty) of the outermost circle is 8.700 (approximately).

  There are reasons finding the value of this radius is an exercise/problem in
  /discrete/ mathematics (one is because algorithms are step-by-step discrete
  things, another is that the answer can only be given with finite precision,
  which is a discrete math idea) and there are reasons for it being /continuous/
  mathematics (because you can do it without a computer, and the answer is a
  /real/ number, which is a continuous math idea). In other words, it depends!

  Whether or not this was an exercise (versus a problem) depends on if on first
  contact you immediately knew how to answer it or not!

  Below are two computational solutions to this problem, one in C++, one in
  elisp. The exercise of your thinking and writing skills is to compare and
  contrast the two. Bear in mind that to be responsive at all there should be
  at least one point of comparison (telling how they are the same) and at least
  one point of contrast (telling how they are different), and preferably two or
  more of each.

#+BEGIN_SRC C++ :var num=10000000 :results output
  #include <iostream>
  #include <iomanip>
  #include <cmath>
  #include <ctime>
  #include <cstdlib>
  using namespace std;

  double limitingRadius(long numSides)
  {
     double radius = 1.0;
     for (long i = 3; i < numSides; i++)
     {
        radius /= cos(M_PI / i);
     }
     return radius;
  }

  int main(int argc, const char* argv[])
  {
     int n = (argc < 2) ? num : atol(argv[1]);
     clock_t start = clock();
     double result = limitingRadius(n);
     clock_t end = clock();
     cout << "Calculated " << setprecision(17) << result
          << " with " << num << " iterations in "
          << (end - start) / (double) CLOCKS_PER_SEC
          << " seconds.\n";
     return 0;
  }
#+END_SRC

#+RESULTS:
: Calculated 8.70003233192908 with 10000000 iterations in 0.94399999999999995 seconds.

#+BEGIN_SRC emacs-lisp :results silent
  (defun limiting-radius (num-sides)
    (loop with result = 1.0
          for i from 3 below num-sides
          do (setq result (/ result (cos (/ pi i))))
          finally return result))

  (defun calculate-limiting-radius (num-sides)
    (let* ((start (float-time))
           (result (limiting-radius num-sides))
           (end (float-time)))
      (format "Calculated %.17f with %d iterations in %.17f seconds."
              result num-sides (- end start))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (calculate-limiting-radius 100000)
#+END_SRC

#+RESULTS:
: Calculated 8.69960730405618676 with 100000 iterations in 0.11685919761657715 seconds.

#+BEGIN_SRC emacs-lisp
  (calculate-limiting-radius 1000000)
#+END_SRC

#+RESULTS:
: Calculated 8.69999369233345732 with 1000000 iterations in 0.47839140892028809 seconds.

#+BEGIN_SRC emacs-lisp
  (calculate-limiting-radius 10000000)
#+END_SRC

#+RESULTS:
: Calculated 8.70003233192909420 with 10000000 iterations in 6.17167282104492188 seconds.

#+begin_info
  Something I have noticed about these two functinos is how faste they ran.
  The c++ code definately ran faster than the elisp code.

  Somthing similar though is how they compute the answer. They both loop through
  each sided figure and perform the calculation.

  Also similar is the result they produced. Using the same amount of itterations
  they were able to produce values that only started to differ at the fourteenth
  decimal place.
  
  What's great about the elsip code is how small it is. 
  It takes up considerably less space than the c++ code.
#+end_info
