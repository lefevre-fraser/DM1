#+TITLE: DM1 Week 03 Ponder/Prove
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-05-19 Sat 14:59]
| Headline               |   Time |      |
|------------------------+--------+------|
| *Total time*           | *2:14* |      |
|------------------------+--------+------|
| Exercises              |   0:46 |      |
| \_  WRP                |        | 0:05 |
| \_  TOJ                |        | 0:06 |
| \_  WRU                |        | 0:04 |
| \_  TOL                |        | 0:01 |
| \_  TUK                |        | 0:05 |
| \_  WVQ                |        | 0:06 |
| \_  WVU                |        | 0:07 |
| \_  TVL                |        | 0:05 |
| \_  TXG                |        | 0:07 |
| Problems               |   1:11 |      |
| \_  WZO                |        | 0:10 |
| \_  TOU                |        | 0:19 |
| \_  TLI                |        | 0:03 |
| \_  WPI                |        | 0:03 |
| \_  TTV                |        | 0:03 |
| \_  WUZ                |        | 0:02 |
| \_  TUW                |        | 0:18 |
| \_  WWS                |        | 0:04 |
| \_  WUE                |        | 0:09 |
| Puzzles                |   0:15 |      |
| \_  MMP (not in book)  |        | 0:15 |
| Identify Collaborators |   0:02 |      |
#+END:

* Exercises
** DONE WRP
   CLOSED: [2018-05-19 Sat 12:02]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 11:57]--[2018-05-19 Sat 12:02] =>  0:05
   :END:
#+begin_note
  Let P(x) be the statement \ldquo{}x is older than 21 years\rdquo where the domain for x
  consists of all people.

  Express each quantification in English.
  1. $\exists$ x P(x)
  2. $\forall$ x P(x)
  3. $\exists$ x $\neg$ P(x)
  4. $\forall$ x $\neg$ P(x)
#+end_note
#+begin_info
  1. There are some people in the set of all people that are older than 21 years.
  2. All people are older than 21.
  3. There are some people in the set of all people that are not older than 21.
  4. All people are not older than 21.
#+end_info
** DONE TOJ
   CLOSED: [2018-05-19 Sat 12:08]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 12:02]--[2018-05-19 Sat 12:08] =>  0:06
   :END:
#+begin_note
  Let S(x) be the statement \ldquo{}x is a student at BYU-Idaho\rdquo where the domain
  consists of the residents of Idaho.

  Express each of these quantifications in English.
  1. $\exists$ x S(x)
  2. $\forall$ x S(x)
  3. $\neg \exists$ x S(x)
  4. $\exists$ x $\neg$ S(x)
  5. $\neg \forall$ x $\neg$ S(x)
  6. $\forall$ x $\neg$ S(x)
#+end_note
#+begin_info
  1. There are some people in Idaho that are students at BYU-Idaho
  2. All people in Idaho are students at BYU-Idaho
  3. There are not any people in Idaho that are students at BYU-Idaho
  4. There are some people in Idaho that are not students at BYU-Idaho
  5. Not everyone in Idaho is not a student at BYU-Idaho
  6. Every one in Idaho is a student at BYU-Idaho
#+end_info
** DONE WRU
   CLOSED: [2018-05-19 Sat 12:12]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 12:08]--[2018-05-19 Sat 12:12] =>  0:04
   :END:
#+begin_note
  Translate these statements into English, where F(x) is \ldquo{}x is a friend\rdquo,
  C(x) is \ldquo{}x is cool\rdquo, and the domain consists of all people.
  1. $\forall$ x (F(x) $\rightarrow$ C(x))
  2. $\exists$ x (F(x) $\wedge$ C(x))
  3. $\forall$ x (F(x) $\wedge$ C(x))
  4. $\exists$ x (F(x) $\rightarrow$ C(x))
#+end_note
#+begin_info
  1. Every person is cool if they are a friend
  2. Some people are friends and cool
  3. All people are friends and cool
  4. Some people are cool if the are a friend
#+end_info
** DONE TOL
   CLOSED: [2018-05-19 Sat 12:15]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 12:13]--[2018-05-19 Sat 12:14] =>  0:01
   :END:
#+begin_note
  Translate these statements into English, where S(x) is \ldquo{}x is a student\rdquo, R(x)
  is \ldquo{}x is from Russia\rdquo, and the domain consists of all people.
  1. $\forall$ x (S(x) $\rightarrow$ R(x))
  2. $\exists$ x (R(x) $\rightarrow$ R(x))
  3. $\forall$ x (S(x) $\wedge$ R(x))
  4. $\exists$ x (S(x) $\wedge$ R(x))
#+end_note
#+begin_info
  1. All people are from Russia if they are students
  2. Some people are form Russia if they are from Russia
  3. All people are students and from Russia
  4. Some people are students and from Russia
#+end_info
** DONE TUK
   CLOSED: [2018-05-19 Sat 12:20]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 12:15]--[2018-05-19 Sat 12:20] =>  0:05
   :END:
#+begin_note
  Translate these statements into English, where the domain for each variable
  consists of all real numbers.
  1. $\exists$ x $\forall$ y (x > y)
  2. $\exists$ x $\exists$ y (((x $\geq$ 0) $\wedge$ (y $\geq$ 0)) $\rightarrow$ (xy $\geq$ 0))
  3. $\exists$ x $\forall$ y $\exists$ z (x = y + z)
#+end_note
#+begin_info
  1. Some x values are greater than all y values
  2. The product of some x and y values are greater than or equal to zero 
     if the x values are greater than or equal to zero 
     and the y values are greater than or equal to zero
  3. For some x, all y, and some z, x is eqaul to y + z
#+end_info
** DONE WVQ
   CLOSED: [2018-05-19 Sat 12:26]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 12:20]--[2018-05-19 Sat 12:26] =>  0:06
   :END:
#+begin_note
  Let Q(x, y) be the statement \ldquo{}x asks y a question,\rdquo where the domain for both
  x and y consists of all students in a class. Express each quantification in an
  English sentence.
  1. $\forall$ x $\exists$ y Q(x, y)
  2. $\forall$ x $\forall$ y Q(x, y)
  3. $\exists$ x $\exists$ y Q(x, y)
  4. $\exists$ x $\forall$ y Q(x, y)
  5. $\forall$ y $\exists$ x Q(x, y)
  6. $\exists$ y $\exists$ x Q(x, y)
#+end_note
#+begin_info
  1. All students int the class ask some students in the class a question
  2. All students in the class ask all the stuents in the class a question
  3. Some students in the class ask some the stuents in the class a question
  4. Some students in the class ask all the stuents in the class a question
  5. Some students in the class ask all the stuents in the class a question
  6. Some students in the class ask some the stuents in the class a question

#+end_info
** DONE TUQ
   CLOSED: [2018-05-19 Sat 13:04]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:26]--[2018-05-19 Sat 13:04] => -0:22
   :END:
#+begin_note
  Take the statement Q(x, y) \ldquo{}x asks y a question\rdquo. Express each of these
  sentences in terms of Q(x, y), quantifiers, and logical connectives, where the
  domain for x consists of people at your school, and likewise for y consists of
  people at your school. Use the predicates S(x) = \ldquo{}x is a student\rdquo, T(x) = \ldquo{}x
  is a teacher\rdquo, and A(x) = \ldquo{}x is a TA\rdquo to distinguish different roles for
  people.
  1. No student has ever asked a teacher a question.
  2. There is a student who has asked a teacher a question.
  3. Every student has asked a teacher and a TA a question.
  4. At least two students have asked a teacher a question.
#+end_note
#+begin_info
  1. \not \exist x \forall y ((S(X) \land T(Y)) \rarr Q(x, y))
  2. \exist x \exist y ((S(X) \land T(Y)) \rarr Q(x, y))
  3. \forall x \exist y \exist z ((S(X) \land T(Y) \land A(z)) \rarr (Q(x, y) \land Q(x, z))
  4. \forall x \exist y (((\sum S(x) \ge 2) \land T(y)) \rarr Q(x, y))
#+end_info
** DONE WVU
   CLOSED: [2018-05-19 Sat 13:11]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:04]--[2018-05-19 Sat 13:11] =>  0:07
   :END:
#+begin_note
  Let the statement T(x, y) \ldquo{}x has taught y\rdquo where the domains for x and y
  consist of all teachers teaching and all classes taught in some department.
  Express each quantification in an English sentence.
  1. No teacher has taught every class.
  2. Every teacher has taught every class.
  3. At least two teachers have taught a class.
  4. No teacher has taught every class.
#+end_note
#+begin_info
 - Restate ::
    Copy the above one through four. 
    We are to "express" the statements
    in an english sentence.
 - Solution ::
  1. No teacher has taught every class.
  2. Every teacher has taught every class.
  3. At least two teachers have taught a class.
  4. No teacher has taught every class.
#+end_info
** DONE TVL
   CLOSED: [2018-05-19 Sat 13:17]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:12]--[2018-05-19 Sat 13:17] =>  0:05
   :END:
#+begin_note
  Let D(x, y) be the statement \ldquo{}x has dropped out of y\rdquo where the domain for x
  consists of all students and the domain for y consists of all classes. Express
  each of the statements below as an English sentence.
  1. D(Jackson Andrews, Discrete Mathematics)
  2. $\exists$! x $\forall$ y D(x, y)
  3. $\forall$ x $\exists$ y D(x, y)
#+end_note
#+begin_info
  1. Jackson Andrews has dropped out of Discrete Mathematics.
  2. Only one student has dropped out of all classes.
  3. All students have dropped out of some classes.
#+end_info
** DONE TXG
   CLOSED: [2018-05-19 Sat 13:26]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:19]--[2018-05-19 Sat 13:26] =>  0:07
   :END:
#+begzin_note
  What are the truth values of the expressions below if T(x, y) is \ldquo{}xy < y\rdquo,
  where the domain consists of all integers?
  1. T(0, 5)
  2. T(1, 1)
  3. T(7, -3)
  4. $\exists$ x $\forall$ y T(x, y)
  5. $\exists$ x T(x, 2)
  6. $\forall$ y T(9, y)
  7. $\forall$ x $\forall$ y T(x, y)
  8. $\forall$ x $\exists$ y T(x, y)
#+end_note
#+begin_info
  1. t
  2. nil
  3. t
  4. t
  5. t
  6. nil
  7. nil
  8. nil
#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** DONE WZO
   CLOSED: [2018-05-19 Sat 13:36]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:26]--[2018-05-19 Sat 13:36] =>  0:10
   :END:
#+begin_note
  Translate each of these statements into logical expressions using predicates,
  quantifiers, and logical connectives.
  1. Everyone\rsquo{}s a critic.
  2. No one is perfect.
  3. At least one of your friends is perfect.
  4. All of your friends are critics.
  5. Everyone is a critic or someone is your friend.
  6. No one is a critic and everyone is your friend.
#+end_note
#+begin_info
  1. x is all people, C(x) is "x is a critic"
     \forall x C(x)
  2. x is all people, P(x) is "x is perfect"
     \not\exist x P(x)
  3. x is all your friends, P(x) is "x is perfect"
     \exist x P(x)
  4. x is all you friends, C(x) is "x is a critic"
     \forall x C(x)
  5. x and y are all people, C(x) is "x is a critic", F(x) is "x is your friend"
     \forall x \exist y (C(x) \lor F(x))
  6. x and y are all people, C(x) is "x is a critic", F(x) is "x is your friend"
     \not\exist x \forall y (C(x) \land F(y))
#+end_info
** DONE TOU
   CLOSED: [2018-05-19 Sat 13:55]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:36]--[2018-05-19 Sat 13:55] =>  0:19
   :END:
#+begin_note
  Express each of these statements using quantifiers. Then form the negation of
  the statement so that no negation is to the left of a quantifier. Next,
  express the negation in simple English.
  1. All horses have hooves.
  2. No horses can fly.
  3. Every bat is blind.
  4. No bear can dance.
  5. There is at least one penguin that can swim and catch fish.
#+end_note
#+begin_info
  1. x is all horses, H(x) is "x has hooves"
     \forall x H(x)
     \forall x (\not H(x))
     All horses do not have hooves.
  2. x is all horses, F(x) is "x can fly"
     \not\exist x F(x)
     \forall x F(x)
     All horses can fly.
  3. x is all bats, B(x) is "x is blind"
     \forall x B(x)
     \forall x (\not B(x))
     All bats are not blind.
  4. x is all bears, D(x) is "x can dance"
     \not\exist x D(x)
     \forall x D(x)
     All bears can dance.
  5. x is all penguins, S(x) is "x can swim", F(x) is "x can catch fish"
     \exist x (S(x) \land F(x))
     \forall x (\not S(x) \lor \not F(x))
     All penguins can not swim or can not catch fish.
#+end_info
** TODO WYH *
#+begin_note
  Express each of these statements using predicates, quantifiers, and logical connectives.
  1. At least one more song, among the nonempty set of songs, can be sung if
     there is a soul alive to music.
  2. Whenever there is an error, at least one error message is displayed.
  3. All the programs have been scanned, but at least one program has a virus.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE TLI
   CLOSED: [2018-05-19 Sat 13:58]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:55]--[2018-05-19 Sat 13:58] =>  0:03
   :END:
#+begin_note
  The notation $\exists$! x P(x) denotes \ldquo{}There exists a unique x such that P(x) is
  true.\rdquo If the domain consists of all integers, what are the truth values of
  these statements?
  1. $\exists$! x (x > 1)
  2. $\exists$! x (x^2 = 1)
  3. $\exists$! x (x + 3 = 2x)
  4. $\exists$! x (x = x + 1)
#+end_note
#+begin_info
  1. nil
  2. t
  3. t
  4. nil
#+end_info
** DONE WPI
   CLOSED: [2018-05-19 Sat 14:01]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 13:58]--[2018-05-19 Sat 14:01] =>  0:03
   :END:
#+begin_note
  What are the truth values of these statements?
  1. $\exists$! x P(x) $\rightarrow$ $\exists$ x P(x)
  2. $\forall$ x P(x) $\rightarrow$ $\exists$! x P(x)
  3. $\exists$! x $\neg$ P(x) $\rightarrow$ $\neg\forall$ x P(x)
  4. $\forall$ x P(x) $\rightarrow$ $\exists$ x P(x)
#+end_note
#+begin_info
  1. t
  2. nil
  3. t
  4. t
#+end_info
** TODO TSD *
#+begin_note
  Let E(x) be the statement \ldquo{}x is an excuse\rdquo, L(x) be the statement \ldquo{}x is a
  lie\rdquo, and R(x) be the statement \ldquo{}x is a reason\rdquo. Suppose that the domain for x
  consists of all English words. Express each of these statements using
  quantifiers, logical connectives, and E(x), L(x), and R(x).
  1. Some excuses are ignored.
  2. Not all lies are reasons.
  3. Some excuses are not reasons.
  4. Some excuses are lies.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WTM *
#+begin_note
  Let L(x), F(x), S(x), and D(x) be the statements \ldquo{}x is a Latter-day Saint\rdquo, \ldquo{}x
  is one of my friends\rdquo, \ldquo{}x is a soldier\rdquo, and \ldquo{}x is willing to drink\rdquo,
  respectively. Express each of these statements using quantifiers, logical
  connectives, and L(x), M(x), O(x), and D(x).
  1. No Latter-day Saint is willing to drink.
  2. No soldiers ever decline a drink.
  3. All my friends are Latter-day Saints.
  4. My friends are not soldiers.
  5. Does 4 follow logically from 1, 2 and 3? If not, is there a correct
     conclusion?
:HINT:
  - Hint :: This was adapted from a puzzle by Lewis Carroll.
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE TTV
   CLOSED: [2018-05-19 Sat 14:05]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:02]--[2018-05-19 Sat 14:05] =>  0:03
   :END:
#+begin_note
  Determine the truth value of each of these statements if the domain consists
  of all real numbers.
  1. $\exists$ x (x^3 = -9)
  2. $\exists$ x (x^4 > x^2)
  3. $\forall$ x ((-x)^2 = x^2)
  4. $\forall$ x (2x > x)
#+end_note
#+begin_info
  1. t
  2. t
  3. t
  4. nil
#+end_info
** TODO WUZ
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:05]--[2018-05-19 Sat 14:07] =>  0:02
   :END:
#+begin_note
  Solidify your knowledge of how looping works in elisp, and then translate the
  following C++ code into elisp:

#+BEGIN_SRC C++ :results output
/*************************************************************************
,* Quantifiers Example With Unary Predicates
*************************************************************************/
#include <cstdlib>
#include <iomanip>
#include <iostream>
using namespace std;

/**************************************************************
,* The Predicate class is an abstract base class with pure virtual
,* abstract functions (per the =0 suffix).
***************************************************************/
class Predicate
{
public:
   /**************************************************************
   * Is this Predicate true for the given x?
   ***************************************************************/
   virtual bool isTrue(int x)=0;

   /**************************************************************
   * Is this Predicate true for the given x?
   ***************************************************************/
   virtual bool isFalse(int x)=0;

   /**************************************************************
   * Is this Predicate true for all values in the given set?
   ***************************************************************/
   bool forAll(int set[], int size);

   /**************************************************************
   * Is this Predicate true for some value in the given set?
   ***************************************************************/
   bool forSome(int set[], int size);
};

/**************************************************************
,* forAll is A#xP(x) (The Universal Quantification of P(x), the
,* proposition that is true if and only if P(x) is true for all
,* x in the universe of discourse.)
,*
,* loops through all values in a set (of a finite size) to see
,* if the Predicate is always true.  If it encounters a value
,* for which the Predicate is false, then A#xP(x) is false.
,* Otherwise A#xP(x) is true.
***************************************************************/
bool Predicate::forAll(int set[], int size)
{
   for (int i = 0; i < size; i++)
   {
      if (isFalse(set[i]))
      {
         return false;
      }
   }
   return true;
}

/**************************************************************
,* forSome = E#xP(x) (The Existential Quantification of P(x),
,* the proposition that is true if and only if there exists an
,* x in the universe of discourse such that P(x) is true.)
,*
,* loops through all values in a set (of a finite size) to see
,* if the Predicate is ever true.  If it encounters any value
,* for which the Predicate is true, then E#xP(x) is true.
,* Otherwise E#xP(x) is false.
***************************************************************/
bool Predicate::forSome(int set[], int size)
{
   for (int i = 0; i < size; i++)
   {
      if (isTrue(set[i]))
      {
         return true;
      }
   }
   return false;
}

class Even : public Predicate
{
public:
   bool isTrue(int x)
   {
      return ((x % 2) == 0);
   }

   bool isFalse(int x)
   {
      return !isTrue(x);
   }
};

class Odd : public Predicate
{
public:
   bool isTrue(int x)
   {
      return ((x % 2) == 1);
   }

   bool isFalse(int x)
   {
      return !isTrue(x);
   }
};

/**************************************************************
,* main tests for both true and false return values for the
,* two functions forAll and forSome for the simple Predicates
,* Even and Odd.
***************************************************************/
int main()
{
   Even even;
   Odd odd;

   int Evens[] = {0, 2, 4, 6, 8};
   int Odds[] = {1, 3, 5, 7, 9};

   cout << boolalpha << endl;
   cout << "even.forAll(Evens, 5)\n"
        << "     expected to return true;\n"
        << " actual return value is "
        <<  even.forAll(Evens, 5) << ".\n\n";
   cout << "odd.forAll(Evens, 5)\n"
        << "     expected to return false;\n"
        << " actual return value is "
        <<  odd.forAll(Evens, 5) << ".\n\n";
   cout << "even.forAll(Odds, 5)\n"
        << "     expected to return false;\n"
        << " actual return value is "
        <<  even.forAll(Odds, 5) << ".\n\n";
   cout << "odd.forAll(Odds, 5)\n"
        << "     expected to return true;\n"
        << " actual return value is "
        <<  odd.forAll(Odds, 5) << ".\n\n";

   cout << "--------------------------------\n\n";

   cout << "even.forSome(Evens, 5)\n"
        << "     expected to return true;\n"
        << " actual return value is "
        <<  even.forSome(Evens, 5) << ".\n\n";
   cout << "odd.forSome(Evens, 5)\n"
        << "     expected to return false;\n"
        << " actual return value is "
        <<  odd.forSome(Evens, 5)  << ".\n\n";
   cout << "even.forSome(Odds, 5)\n"
        << "     expected to return false;\n"
        << " actual return value is "
        <<  even.forSome(Odds, 5) << ".\n\n";
   cout << "odd.forSome(Odds, 5)\n"
        << "     expected to return true;\n"
        << " actual return value is "
        <<  odd.forSome(Odds, 5)  << ".\n\n";

   return 0;
}
#+END_SRC

:HINT:
  - Hint :: First make this code NON-object-oriented (purely imperative) by
            using function pointers instead of using a class to encapsulate a
            function. For example:
#+BEGIN_SRC C++ :results output
#include <cstdlib>
#include <iomanip>
#include <iostream>
using namespace std;

bool oddp(int n) { return ((n % 2) == 1); }

typedef bool (*intPredicate)(int);

int main()
{
   intPredicate pred = oddp;
   cout << boolalpha << pred(5) << endl;
   return 0;
}
#+END_SRC
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WZM *
#+begin_note
  Write the definitions of /injective/ and /surjective/ given in TBD 
  using quantifier symbols instead of words.
:HINT:
  - Hint :: Recall that \lsquo{}for all\rsquo or \lsquo{}for every\rsquo is Universal ($\forall$), and \lsquo{}for
            some\rsquo or \lsquo{}there exists\rsquo is Existential ($\exist$).
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE TUW
   CLOSED: [2018-05-19 Sat 14:25]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:07]--[2018-05-19 Sat 14:25] =>  0:18
   :END:
#+begin_note
  Use quantifiers and predicates with more than one variable to express these statements.
  1. Every CS major needs to take discrete mathematics.
  2. Every student in the class owns a laptop.
  3. There is a student in the class who has taken data structures.
  4. No student has been in every building at the University.
  5. Exactly one student has been in every room of the STC.
  6. Every student has been in at least one room of every building on campus.
#+end_note
#+begin_info
  x is all people
  C(x) is "x is in the class"
  CS(x) is "x is a CS major"
  DM(x) is "x needs to take Discrete Mathematics"
  S(x) is "x is a student"
  L(x) is "x owns a laptop"
  DS(x) is "x has taken data structure"
  E(x, y) is "x has been in y"
  STC(x) is "x has been in every room of the STC"
  
  1. \forall x (CS(x) \rarr DM(x))
  2. \forall x (S(x) \rarr L(x))
  3. \exist x DS(C(S(x)))
  4. \not\exist x (S(x) \land E(x, every building at the University))
  5. \exist! x (S(x) \land E(x, every room of the STC))
  6. \forall x (S(x) \land (E(x, \exist (every buliding on campus)))
#+end_info
** TODO WWD *
#+begin_note
  Use quantifiers and predicates with more than one variable to express the
  /negations/ of these statements:
  1. Every CS major needs to take discrete mathematics.
  2. Every student in the class owns a laptop.
  3. There is a student in the class who has taken data structures.
  4. No student has been in every building at the University.
  5. Exactly one student has been in every room of the STC.
  6. Every student has been in at least one room of every building on campus.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WWR *
#+begin_note
  Express each of these statements using predicates, quantifiers, logical
  connectives, and mathematical operators where the domain consists of all
  integers.
  1. The average of two numbers is not greater than those two numbers.
  2. The product of a positive number and a negative number is negative.
  3. There is no solution for a number divided by zero.
  4. All positive numbers are greater than all negative numbers.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO TWN *
#+begin_note
  Express the statement \ldquo{}no prime number has 3 factors\rdquo using predicates,
  quantifiers, logical connectives, and mathematical operators.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE WWS
   CLOSED: [2018-05-19 Sat 14:30]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:26]--[2018-05-19 Sat 14:30] =>  0:04
   :END:
#+begin_note
  If the domain consists of all integers, what are the truth values of these statements?
  1. $\forall$ x $\forall$ y (x $\neq$ 0) $\wedge$ (y $\neq$ 0) $\leftrightarrow$ (xy $\neq$ 0)
  2. $\exists$ x $\forall$ y (x + y > y)
  3. $\exists$ x $\forall$ y (x + y < y)
  4. $\exists$! x $\forall$ y (x + y = y)
#+end_note
#+begin_info
  1. t
  2. t
  3. t
  4. t
#+end_info
** TODO WZG *
#+begin_note
  Determine the truth value of the statement

  $\forall$ x $\exists$ y (x - y $\geq$ x)

  if the domain for x and y consists of
  1. all real numbers.
  2. the natural numbers.
  3. all negative integers.
  4. rational numbers.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO TKH
#+begin_note
  Expand to two nested quantifiers the code you created for one quantifier.

  Specifically, implement these four functions, shown side-by-side with their
  symbolic logic equivalents:

  | Function Name     | In Symbols  |
  |-------------------+-------------|
  | for-all-for-all   | $\forall{}$ x $\forall{}$ y |
  | for-all-for-some  | $\forall{}$ x $\exists{}$ y |
  | for-some-for-all  | $\exists{}$ x $\forall{}$ y |
  | for-some-for-some | $\exists{}$ x $\exists{}$ y |

  Let\rsquo{}s examine these quantifications in the context of loops and a generic
  predicate P. These will be /nested/ loops, an outer one wrapping an inner one,
  because /nested/ quantification is what is being expressed. The predicate
  (function) call (P x y) goes in the inner loop, which controls the y, while
  the outer loop controls the x.

  \ldquo{}For all x for all y\rdquo wants to find (P x y) always true. That\rsquo{}s what it means
  for the nested quantification to be true, and naturally, this only works if
  the domains of x and y are finite. Even then, it really only /works/ if these
  domains are reasonably finite --- not /too/ big. Iteration is serial, after
  all, and time is short.

  So, for-all-for-all loops through x\rsquo{}s domain, and for each x loops through
  each y in y\rsquo{}s domain. On each inner-loop iteration it calls (P x y) and checks
  the value. If the value is ever false, then for-all-for-all is false ---
  immediately --- no need to check any further. Some y has been found for some x
  where the predicate is false. If both loops finish with nary a false
  evaluation, for-all-for-all is ultimately true. There is no x for which, for
  any y, (P x y) is false.

  The other function with similarly relatively simple logic is
  for-some-for-some. This function loops through x\rsquo{}s domain, and for each x
  loops through each y in y\rsquo{}s domain. On each inner-loop iteration it calls (P x
  y) and checks the value. If a true value is found, then for-some-for-some is
  true --- immediately --- no need to check any further. If both loops finish
  never having triggered true, for-some-for-some is ultimately false. There is
  no x for which there is some y for which (P x y) is true.

  The other two are trickier. \ldquo{}For all x for some y\rdquo wants (P x y) to always be
  true sometimes, and \ldquo{}for some x for all y\rdquo wants (P x y) to sometimes be true
  always. Implement for-all-for-some and for-some-for-all the best, most elegant
  way you can.

  Test your implementations of these four functions using a suitable binary
  (arity 2) predicate, for example =>=.
:HINT:
  - Hint :: See WUZ for the context.
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE WUE
   CLOSED: [2018-05-19 Sat 14:39]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:30]--[2018-05-19 Sat 14:39] =>  0:09
   :END:
#+begin_note
  Consider Doctrine and Covenants 130:20-21 in light of what you know of
  predicates and quantifiers:

  - 20. :: /There is a law, irrevocably decreed in heaven before the foundations
           of this world, upon which all blessings are predicated./
  - 21. :: /And when we obtain any blessing from God, it is by obedience to that
           law upon which it is predicated./

  Given the predicate $P(x, y)$ = \ldquo{}blessing $x$ is predicated on law \(y\)\rdquo,
  these two verses are best expressed as a quantified statement by which of the
  following?

  1. $\forall\,x\,\forall\,y\,P(x, y)$
  2. $\forall\,x\,\exists\,y\,P(x, y)$
  3. $\exists\,x\,\forall\,y\,P(x, y)$
  4. $\exists\,x\,\exists\,y\,P(x, y)$

  Justify your choice.
#+end_note
#+begin_info
  I choose number 2.

  I like to think o fthe statement as being
  "all blessings come from some law, but the
  relationship between the two is not one-to-one
  we receive multiple blessings for a single law."

  Hence the reason I like the 2nd statement
  "for all blessings there exists some law
  upon which it is predicated."
#+end_info
* Puzzles
  Puzzle, to be precise.
** DONE MMP (not in book)
   CLOSED: [2018-05-19 Sat 14:54]
   :LOGBOOK:
   CLOCK: [2018-05-19 Sat 14:39]--[2018-05-19 Sat 14:54] =>  0:15
   :END:
#+begin_note
   What is the following code demonstrating?
#+BEGIN_SRC emacs-lisp :results silent
  (defun mm (m1 m2)
    "
    Multiplication of 2x2 matrices works as follows:
    | a b |   | e f |   | a*e + b*g   a*f + b*h |
    |     | x |     | = |                       |
    | c d |   | g h |   | c*e + d*g   c*f + d*h |
  "
    (let* ((ab (elt m1 0))
           (cd (elt m1 1))
           (ef (elt m2 0))
           (gh (elt m2 1))
           (a (elt ab 0))
           (b (elt ab 1))
           (c (elt cd 0))
           (d (elt cd 1))
           (e (elt ef 0))
           (f (elt ef 1))
           (g (elt gh 0))
           (h (elt gh 1)))
      (vector (vector (+ (* a e) (* b g))
                      (+ (* a f) (* b h)))
              (vector (+ (* c e) (* d g))
                      (+ (* c f) (* d h))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results raw
  (rest (rest (rest (symbol-function 'mm))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let ((m [[0 1] [1 1]]))
    (mm m (mm m (mm m (mm m (mm m m))))))
#+END_SRC
#+end_note
*** Rephrase
    Explain what the following code does.
*** Approach
    mm takes in two lists that are of length 2
    Since there is acomment about 2x2 matricei multiplication
    I assume mm performes a 2x2 matricie multiplication.
*** Solution
    the code defines variables to match those listed
    in the table in the comment in the code.
    it then performs matricie multiplication
    and returns the new matricie.
*** Proof
    matrix A  matrix B
    [0 1]     [1 0]
    [1 1]     [2 1]

    AxB
    [2 1]
    [3 1]

    Now, using the code above.

#+BEGIN_SRC elisp
  (mm [[0 1] [1 1]] [[1 0] [2 1]])
#+END_SRC

#+RESULTS:
: [[2 1] [3 1]]

* DONE Identify Collaborators
  CLOSED: [2018-05-19 Sat 14:56]
  :LOGBOOK:
  CLOCK: [2018-05-19 Sat 14:54]--[2018-05-19 Sat 14:56] =>  0:02
  :END:
  Identify your collaborators and the contribution of each, in the following way:

  - Sawyer Gehring :: Helped me throughout the assignment.
