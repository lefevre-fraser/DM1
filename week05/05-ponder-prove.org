#+TITLE: DM1 Week 05 Ponder/Prove
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-06-02 Sat 15:30]
| Headline               |   Time |      |
|------------------------+--------+------|
| *Total time*           | *2:52* |      |
|------------------------+--------+------|
| Exercises              |   1:29 |      |
| \_  QAM                |        | 0:05 |
| \_  REX                |        | 0:11 |
| \_  QCV                |        | 0:02 |
| \_  RFC                |        | 0:04 |
| \_  QCZ                |        | 0:33 |
| \_  RFF                |        | 0:10 |
| \_  QDM                |        | 0:05 |
| \_  RJV                |        | 0:14 |
| \_  QIQ                |        | 0:02 |
| \_  RLH                |        | 0:03 |
| Problems               |   1:22 |      |
| \_  RGL                |        | 0:15 |
| \_  QEB                |        | 0:05 |
| \_  RGM                |        | 0:05 |
| \_  QFK                |        | 0:05 |
| \_  RHB                |        | 0:09 |
| \_  QGK                |        | 0:04 |
| \_  QGT                |        | 0:08 |
| \_  QKT                |        | 0:09 |
| \_  RNM                |        | 0:10 |
| \_  QOS                |        | 0:12 |
| Identify Collaborators |   0:01 |      |
#+END:

* Exercises
** DONE QAM
   CLOSED: [2018-06-02 Sat 10:38]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 10:33]--[2018-06-02 Sat 10:38] =>  0:05
   :END:
#+begin_note
  Henry only has one pair of pants. How many different outfits does Henry have
  if he has 5 long-sleeve shirts and 3 short-sleeve shirts? (An outfit is \ldquo{}pants
  with either a long-sleeve shirt or a short-sleeve shirt\rdquo.)

  If Henry buys another pair of pants and 10 ties, then how many different
  outfits (shirt /and/ tie /and/ pants) will he have?

  Which basic counting principle applies to each scenario?
:HINT:
  - Hint :: Avoid overthinking this exercise, it is very straightforward. In the
            first scenario, the either/or is a very obvious clue.
:END:
#+end_note
#+begin_info
  With 5 long-sleve shirts, 3 short-sleve shirts, and one pair of pants
  Henry has 8 different outfits.

  With adding another pair of pants, and  10 ties
  Henry has 8 * 2 * 10 = 160 different outfits.
#+end_info
** DONE REX
   CLOSED: [2018-06-02 Sat 10:53]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 10:46]--[2018-06-02 Sat 10:52] =>  0:06
   CLOCK: [2018-06-02 Sat 10:41]--[2018-06-02 Sat 10:46] =>  0:05
   :END:
#+begin_note
  How should the /Sum Rule/ be adjusted when the two sets being selected from
  are /not/ disjoint --- which means the /opposite/ of the oft-repeated \ldquo{}the
  sets are disjoint\rdquo --- they have a /nonempty/ intersection; in other words,
  they have /some/ members in common.
:HINT:
  - Hint :: Concretize two sets and draw their Venn diagram to get some insights
            into this problem.
:END:
#+end_note
#+begin_info
  [[file:../img/DisjointSets.png]] 
  
  The sum rule will need to be adjusted to calculate for 
  the duplicate options.
  In order to do thi you will use the size of one set,
  and the size of the other minus the number of duplicates
  in the sets.
#+end_info
** DONE QCV
   CLOSED: [2018-06-02 Sat 10:59]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 10:56]--[2018-06-02 Sat 10:58] =>  0:02
   :END:
#+begin_note
  How many different /functions/ are there from a set with 3 elements to a set
  with 5 elements?
:HINT:
  - Hint :: It may be helpful to review the definition of a /function/.
:END:
#+end_note
#+begin_info
  There are 5^3 = 125 different functions.
#+end_info
** DONE RFC
   CLOSED: [2018-06-02 Sat 11:02]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 10:59]--[2018-06-02 Sat 11:03] =>  0:04
   :END:
#+begin_note
  How many different /one-to-one/ functions are there from a set with 3 elements
  to a set with 5 elements?
:HINT:
  - Hint :: It may be helpful to review the definition of a /one-to-one
            function/ (an /injection/).
:END:
#+end_note
#+begin_info
  There are 5!/((5-3)!) = 120/2 = 60 different one-to-one functions.
#+end_info
** DONE QCZ
   CLOSED: [2018-06-02 Sat 11:44]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 11:11]--[2018-06-02 Sat 11:44] =>  0:33
   :END:
#+begin_note
  How many different /onto/ functions are there from a set with 3 elements to a
  set with 5 elements?
:HINT:
  - Hint :: It may be helpful to review the definition of an /onto/ function/ (a
            /surjection/).
:END:
#+end_note
#+begin_info
  There are S(3,5)5! = 0;

#+begin_note
  Mathematica code:
  StirlingS2[3,5] * 5!;
#+end_note
#+end_info
** DONE RFF
   CLOSED: [2018-06-02 Sat 11:56]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 11:46]--[2018-06-02 Sat 11:56] =>  0:10
   :END:
#+begin_note
  Concretize the equality

  P(n, r) = n(n - 1)(n - 2) \cdots (n - (r - 1)) = n!/(n - r)!

  and convince yourself that it /is/ an equality.
:HINT:
  - Hint :: Any two positive integer values for n and r with n \ge r (e.g., 8
            and 5) will do.
:END:
#+end_note
#+begin_info
  P(5,4) = 5*4*3*2 = 5!/(5-4)! \rArr 5*4*3*2*1 / 1
         = 5*4*3*2 = 5*4*3*2

  I am convinced that the it is an equality
#+end_info
** DONE QDM
   CLOSED: [2018-06-02 Sat 12:01]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 11:56]--[2018-06-02 Sat 12:01] =>  0:05
   :END:
#+begin_note
  The English language predominantly uses the Subject-Verb-Object word type
  ordering; for example, \ldquo{}Gary saw Alice\rdquo. Other languages might use
  Subject-Object-Verb or Object-Verb-Subject, etc. How many different word
  orderings are possible, /not/ depending on specific words, just their type?
:HINT:
  - Hint :: This is a very straightforward exercise in permutations.
:END:
#+end_note
#+begin_info
  Subject-Verb-Object
  Subject-Object-Verb
  Verb-Subject-Object
  Verb-Object-Subject
  Object-Subject-Verb
  Object-Verb-Subject

  P(3,3) = 3*2*1 = 6
  There are six possible ways.
#+end_info
** DONE RJV
   CLOSED: [2018-06-02 Sat 12:15]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:01]--[2018-06-02 Sat 12:15] =>  0:14
   :END:
#+begin_note
  Suppose you flip a /fair/ coin 10 times. How many different ways can you get

  1. no heads?
  2. exactly one head?
  3. exactly two heads?
  4. exactly $r$ heads?
  5. at least two heads?
#+end_note
#+begin_info
  1. P(10,0) = 0
  2. P(10,1) = 10
  3. P(10,2) = 90
  4. P(10,r) = 10(10 - 1)(10 - 2) \cdots (10 - (r - 1)) = 10!/(10 - r)!
  5. P(10,10) - P(10,1) - P(10,0) = 3628789
#+end_info
** DONE QIQ
   CLOSED: [2018-06-02 Sat 12:17]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:15]--[2018-06-02 Sat 12:17] =>  0:02
   :END:
#+begin_note
  How many bit strings of length 10 contain at least two 1s?
#+end_note
#+begin_info
  From the last problem \rArr 3628789
#+end_info
** DONE RLH
   CLOSED: [2018-06-02 Sat 12:20]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:17]--[2018-06-02 Sat 12:20] =>  0:03
   :END:
#+begin_note
  There are many kinds of fruit: raspberries, strawberries, blueberries, apples,
  oranges, bananas, kiwi, papaya, mango, just to name a few. Just choosing five
  from that list of nine, how many different combinations of fruit salad can you
  make?
#+end_note
#+begin_info
  P(9,5) = 15120
  You can make 15,120 different combinations of fruit salad
#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** DONE RGL
   CLOSED: [2018-06-02 Sat 12:35]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:20]--[2018-06-02 Sat 12:35] =>  0:15
   :END:
#+begin_note
  Recalling the example of how many are the permutations of the letters
  ABCDELMNO, investigate and explain why 0! is defined to be equal to 1.
#+end_note
#+begin_info
  The reason that mathematicians have decided to make 0! be equal to
  one is fairly simple.
  This is the function used to calculate permutations:
  P(n,k) =       n!
               ------
               (n-k)!

  Normaly, there is no problem using 0! as 0,
  but in the case where we want to permute n
  things n ways, where n = k, then we would 
  run into a problem because wew would be trying 
  to devide by zero. So, in order to make this 
  work mathematicians decided that 0! should
  be equal to 1 rather than 0.
#+end_info
** DONE QEB
   CLOSED: [2018-06-02 Sat 12:40]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:35]--[2018-06-02 Sat 12:40] =>  0:05
   :END:
#+begin_note
  How many of the 9! arrangements of the letters ABCDELMNO contain the string
  ELM?
:HINT:
  - Hint :: How many arrangements of ABCDENO are there? (MI) - no E in ABCDNO
:END:
#+end_note
#+begin_info
  9! - 6! = 362160
  There are 362,160 arangements that contain the string ELM
#+end_info
** DONE RGM
   CLOSED: [2018-06-02 Sat 12:51]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:48]--[2018-06-02 Sat 12:51] =>  0:03
   CLOCK: [2018-06-02 Sat 12:40]--[2018-06-02 Sat 12:42] =>  0:02
   :END:
#+begin_note
  How many TLAs (arrangements of 3 alphabetic letters) are there /with
  repetition allowed/?
#+end_note
#+begin_info
  26 * 26 * 26 = 17576
  There can be 17,576`TLAs with repetitions allowed
#+end_info
** DONE QFK
   CLOSED: [2018-06-02 Sat 12:48]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 12:43]--[2018-06-02 Sat 12:48] =>  0:05
   :END:
#+begin_note
  How many different sequences of initials are there for people who either have
  two initials (first and last) or three initials (first, middle and last)?
#+end_note
#+begin_info
  26 * 26 + 26 * 26 * 26 = 18252
  There are 18,252 different sequences of initials
#+end_info
** DONE RHB
   CLOSED: [2018-06-02 Sat 13:50]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 13:41]--[2018-06-02 Sat 13:50] =>  0:09
   :END:
#+begin_note
  How many different sequences can be formed using /either/ two /or/ three
  letters (A-Z) followed by /either/ two /or/ three digits (0-9)?

  For example:

  - AB01
  - ABC02
  - XYZ123
  - ...
#+end_note
#+begin_info
If No Repetitions:
  26 * 25 * 10 * 9 +
  26 * 25 * 24 * 10 * 9 +
  26 * 25 * 10 * 9 * 8 +
  26 * 25 * 24 * 10 * 9 * 8
           \rArr  13,162,500

If Repetitions:
  26 * 26 * 10 * 10 +
  26 * 26 * 26 * 10 * 10 +
  26 * 26 * 10 * 10 * 10 +
  26 * 26 * 26 * 10 * 10 * 10
           \rArr  20,077,200
#+end_info
** DONE QGK
   CLOSED: [2018-06-02 Sat 14:05]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 14:01]--[2018-06-02 Sat 14:05] =>  0:04
   :END:
#+begin_note
  How many different \ldquo{}words\rdquo of the form =ccvcv= are there where =c= represents
  one of the 21 consonants and =v= represents one of the 5 vowels in the English
  alphabet? Assume no letter can be repeated, just count words like \ldquo{}tribe\rdquo or
  \ldquo{}blizo\rdquo --- a non-word but count it anyway --- but not something like \ldquo{}trite\rdquo
  or \ldquo{}gligi\rdquo, which have repeated letters.
#+end_note
#+begin_info
  26 * 25 * 5 * 24 * 3 = 234,000
  There 234,000 different "words" that can be made.
#+end_info
** TODO RVB *
#+begin_note
  \({n \choose k} = {n - 1 \choose k} + {n - 1 \choose k - 1}\).

  This [[recurrence relation][recurrence relation]] is normally defined for nonnegative $n$ and $k$ ($0 \le
  k \le n$), and to be implemented as a recursive function of two parameters needs
  some \ldquo{}escape hatch\rdquo base cases. Here they are:

  \({n \choose k} = 1\) whenever $k = 0$ or $k = n$;

  whence this straightforward implementation:

#+BEGIN_SRC emacs-lisp :results silent
  (defun n-choose-k (n k)
    "Computes C(n, k) by the recursive definition;
  given a pair of nonnegative integers n >= k >= 0,
  returns the value of n choose k."
    (if (or (zerop k) (= k n))
        1
      (+ (n-choose-k (- n 1) (- k 1))
         (n-choose-k (- n 1) k))))
#+END_SRC

  However, there are good reasons to define other boundary conditions for this
  basic combinatorial function and let its parameters range over all the
  integers.

  \({n \choose k} = 0\) whenever $k < 0$ or $k > n$.

  Explore these reasons, and re-implement =n-choose-k= with =cond= instead of
  =if= to handle these other conditions.

  BTW, the numbers \({n \choose k}\) are known as the [[binomial coefficients][binomial coefficients]], and
  for good reason!
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE QGT
   CLOSED: [2018-06-02 Sat 14:41]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 14:33]--[2018-06-02 Sat 14:41] =>  0:08
   :END:
#+begin_note
  Thinking in terms of subsets of size $k$ from a set of size $n$,
  convince yourself of the validity of this summation:

  $\sum_{k = 0}^{n}{n \choose k} = 2^n$.
#+end_note
#+begin_info
Mathematica Coding:
  In[170]:= comb[n_, k_] := 
              n!/((n - k)!*k!)
            myFuncion[n_] :=
              Sum[comb[n, k], {k, 0, n}]
            myFuncion[2]
            myFuncion[3]
            myFuncion[4]
            myFuncion[5]
            myFuncion[6]

  Out[171]= 4
  Out[172]= 8
  Out[173]= 16
  Out[174]= 32
  Out[175]= 64

I am convinced that \sum_{k = 0}^{n}{n \choose k} = 2^n.
#+end_info
** DONE QKT
   CLOSED: [2018-06-02 Sat 14:50]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 14:41]--[2018-06-02 Sat 14:50] =>  0:09
   :END:
#+begin_note
  When you roll two dice, what is the probability that the sum of the numbers
  (1-6) on their faces will be a multiple of 3 (3, 6, 9 or 12)?
#+end_note
#+begin_info
Combinations for multiples of 3:
  1 | 2
  2 | 1
  3 | 3
  3 | 3
  4 | 2
  2 | 4
  5 | 1
  1 | 5
  6 | 3
  3 | 3
  4 | 5
  5 | 4
  6 | 6
  Total: 13

All posible combinations:
  In[189]:= comb[n_, k_] := 
              n!/((n - k)!*k!)
            myFuncion[n_] :=
              Sum[comb[n, k], {k, 0, n}]
            myFuncion[6]

  Out[191]= 64

The probability is 13 / 64 \approx 20.3%
#+end_info
** DONE RNM
   CLOSED: [2018-06-02 Sat 15:00]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 14:50]--[2018-06-02 Sat 15:00] =>  0:10
   :END:
#+begin_note
  Rather than roll dice, Ruth and Ed usually flip a coin to decide who's going
  to do the chores. One day Ed complains --- he thinks he loses too often. So
  Ruth says, \ldquo{}OK, this time you flip two coins, and I flip one. If you get more
  heads than I do, I\rsquo{}ll clean the toilets.\rdquo Ed likes Ruth\rsquo{}s display of
  generosity and says, \ldquo{}You\rsquo{}re on!\rdquo

  What are his chances?
:HINT:
  - Hint :: This was adapted from a problem posed by Marilyn Vos Savant in her
            \ldquo{}Ask Marilyn\rdquo Parade Magazine column.
:END:
#+end_note
#+begin_info
Possible flips for Ed:
  t | t
  t | t
  h | t
  t | h
  h | h
  h | h

Possible flips for Ruth:
  t 
  h

In order for Ed to win he must
get "more" heads than Ruth.

All possible options
| Ruth | Ed | Winner |
|------+----+--------|
| t    | tt | Ruth   |
| t    | tt | Ruth   |
| t    | ht | Ed     |
| t    | th | Ed     |
| t    | hh | Ed     |
| t    | hh | Ed     |
| h    | tt | Ruth   |
| h    | tt | Ruth   |
| h    | ht | Ruth   |
| h    | th | Ruth   |
| h    | hh | Ed     |
| h    | hh | Ed     |

Out of the 12 possiblities,
Ed has 6, and Ruth has 6.

so, Ed has a 50% chance of
winning and so does Ruth.
#+end_info
** DONE QOS
   CLOSED: [2018-06-02 Sat 15:19]
   :LOGBOOK:
   CLOCK: [2018-06-02 Sat 15:07]--[2018-06-02 Sat 15:19] =>  0:12
   :END:
#+begin_note
  Generalize the two- and four- fair-coin-flipping experiment to deal with the
  experiment of flipping /2n/ coins. Find the probability of the event that /n/
  will be heads, and /n/ will be tails.
:HINT:
  - Hint :: The answer will be a function of /n/.
:END:
#+end_note
#+begin_info
  No matter the amount of coins you flip the probability remains 50% tails
  and 50% heads, so, if you flip 2*n coins you would expect to flip
  n heads, and n tails. But what is the probability that it will 
  actually happen? The probability of it can be described by this function:
  In[208]:= comb[n_, k_] := 
              n!/((n - k)!*k!)
            probOf5050[n_] :=
              comb[2 n, n]/(2^(2*n))
            probOf5050[3]

  Out[210]= 5/16

If we flip 6 coins then there is a 5/16 \approx 31.25% chance
that we will get 3 heads and 3 tails.
#+end_info
** TODO ROP *
#+begin_note
  What is the probability that when randomly selecting a permutation of the 26
  letters (assumed all uppercase) of the alphabet the following events will
  occur?

  1. The first 13 letters will be in alphabetical order.
  2. The first and last letters will be B and Y.
  3. The letter I will come before both J and K.
  4. The letters O and P will be next to each other.
  5. The letters U and V will be separated by at least 23 letters.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO QRQ *
#+begin_note
  What should go in place of the \ldquo{};;...\rdquo in the code below? What other
  improvements/fixes does this function need?

#+BEGIN_SRC emacs-lisp
  (defun probability (event space)
    "A function that takes an event and a space
  and returns a number between 0 and 1."
    (let ((result (/ (size event) (size space))))
      ;;...
      result
      ))
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
* Puzzles
** TODO QKA
#+begin_note
  A standard 52-card deck has 4 suits [\heartsuit \spadesuit \diamondsuit \clubsuit] of 13 cards each. A 5-card
  hand can be chosen in any of \({52 \choose 5}\) ways. Bridge is a game where
  each of 4 players is dealt 13 cards, which means the whole deck is dealt. A
  hand has a distribution of suits, which is how many of each suit make up the
  13 total. For example, =[2 2 3 6]= is the suit distribution of the hand
  [Ace\heartsuit 3\hearts 2\diamondsuit{} 9\diamondsuit 4\clubsuit 2\clubsuit 7\clubsuit Jack\spadesuit 9\spadesuit 5\spadesuit Queen\spadesuit 10\spadesuit 6\spadesuit] (2 hearts, 2 diamonds, 3
  clubs and 6 spades).

  How many different hands with a =[4 4 3 2]= suit distribution can be dealt?

  How many different suit distributions are there? (=[4 4 3 2]= is /not/
  different than =[2 3 4 4]=, because order of the suits does /not/ matter.)
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
** TODO RNC
#+begin_note
  In the game of /Five Crowns/ there are 116 cards in two combined decks, and in
  each of 11 hands the number of cards dealt each player increases by one,
  starting at 3, ending at 13. This implies 11 different numbers of total
  possible hands from randomly shuffled decks. At which hand (/n/ between 3
  and 13) will it become infeasible to compute this number of possible hands
  without overflowing the capacity of an elisp /fixnum/?
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
** TODO ROX
#+begin_note
  What is the probability that a randomly chosen 3-digit number unambiguously
  designates a date (month number plus day number paired without punctuation)?
  E.g., 111 is ambiguous, it could mean January 11th (month 1, day 11) or
  November 1st (month 11, day 1). Don\rsquo{}t count numbers with zeros in the second
  or third position (why not the first position?) as ambiguous, given the rule
  that days are never written with a leading zero. E.g., 101 can only mean
  October 1st, not January 1st. Eliminate from the event space any invalid
  numbers, e.g. 345, as neither 3/45 nor 34/5 is a valid date.
:HINT:
  - Hint :: Concretize! List all the 3-digit numbers from 100 to 999 and divide
            them into two sets: valid and invalid.
:END:
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
* DONE Identify Collaborators
  CLOSED: [2018-06-02 Sat 15:21]
  :LOGBOOK:
  CLOCK: [2018-06-02 Sat 15:19]--[2018-06-02 Sat 15:20] =>  0:01
  :END:
  Identify your collaborators and the contribution of each, in the following way:

  - My Self :: I did not collaborate with any one else on this assignment
