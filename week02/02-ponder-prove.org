#+TITLE: DM1 Week 02 Ponder/Prove
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup

[[elisp:(find-file-other-window%20"../week00/00-prepare.org")][Read Instructions]]
[[elisp:(browse-url-of-file%20(org-html-export-to-html))][Export to HTML and Browse]]
[[elisp:(org-clock-report%201)][Insert/Update Clock Summary Report]]
#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-05-14 Mon 17:51]
| Headline               |   Time |      |
|------------------------+--------+------|
| *Total time*           | *5:48* |      |
|------------------------+--------+------|
| Exercises              |   5:00 |      |
| \_  TDR                |        | 0:18 |
| \_  WDT                |        | 0:24 |
| \_  TEJ                |        | 0:50 |
| \_  WFK                |        | 0:24 |
| \_  TER                |        | 0:23 |
| \_  TGE                |        | 0:04 |
| \_  THP                |        | 1:28 |
| \_  WKM                |        | 0:11 |
| \_  TIW                |        | 0:10 |
| \_  TKG                |        | 0:05 |
| \_  WOV                |        | 0:36 |
| \_  WQW                |        | 0:07 |
| Problems               |   0:32 |      |
| \_  TEH                |        | 0:02 |
| \_  WFC                |        | 0:01 |
| \_  WGP                |        | 0:01 |
| \_  WJS                |        | 0:04 |
| \_  WKC                |        | 0:03 |
| \_  WNW                |        | 0:02 |
| \_  TMZ                |        | 0:16 |
| \_  TNL                |        | 0:01 |
| \_  TNQ                |        | 0:02 |
| Puzzles                |   0:10 |      |
| \_  TEU                |        | 0:07 |
| \_  TME                |        | 0:02 |
| \_  WRA                |        | 0:01 |
| Identify Collaborators |   0:06 |      |
#+END:

* Exercises
** DONE TDR
   CLOSED: [2018-05-12 Sat 12:51]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 12:33]--[2018-05-12 Sat 12:51] =>  0:18
   :END:
#+begin_note
  Find the =setf= way of doing the equivalent of =fset=.
#+end_note
#+BEGIN_SRC elisp
  
  (defun dooo (n)
     (+ n 2))
  (fset 'doo (lambda (n) (+ n 2)))
  (setf doooo (lambda (n) (+ n 2)))

  (list
    (list (dooo 6))
    (list (doo 6))
    (list (funcall doooo 6))
  )
#+END_SRC

#+RESULTS:
| 8 |
| 8 |
| 8 |


#+begin_info
  Creating a method suing  setf is almost identical to creating 
  a method using fset.

  The two differences are that fset requires a single quote before 
  the function name and in order to call a function defined by setf
  you must use the "funcall" method.

#+end_info
** DONE WDT
   CLOSED: [2018-05-12 Sat 17:14]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 13:35]--[2018-05-12 Sat 13:59] =>  0:24
   :END:
#+begin_note
  PVP the result of evaluating the following (paying special attention to the
  more-than-syntactic difference between the \lsquo{}starless\rsquo{} form of =let= and the
  \lsquo{}star-suffixed\rsquo{} form):

  PVP - Predict Verify Ponder
#+end_note

*** Problem 1
**** Predict
use a for 1,
b for 2,
c for 3

then add a, b, and c
answer = 6
**** Verify
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) (+ a b c))
#+END_SRC

#+RESULTS:
: 6

My assumption was correct
**** Ponder
(let) allows a use to say
"given that a=1... n=10... then do ____"

*** Problem 2
**** Predict
let a be 1,
b be 2
c be 3

then add a, b, c, and d

This code block will not evaluate,
or it will add the ascii value of d
to a, b, and c
**** Verify
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) (+ a b c d))
#+END_SRC

the function did not evalute. It said
the symblos value as variable is void
**** Ponder
If we changed d to be ?d ti might evaluate with
the asscii calue of d
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) (+ a b c ?d))
#+END_SRC

#+RESULTS:
: 106

It did evalute this way!
     
*** Problem 3
**** Predict
a = 1,
b = 2,
c = 3,

this will try to make a vector
it will contain: +, 1, 2, 3, d
**** Verify
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ a b c d])
#+END_SRC

#+RESULTS:
: [+ a b c d]

I was wrong, a,b, and c did not evalute to the
values set by let.

**** Ponder
Maybe if a I did 'a and so forth, then it 
would work as i previously expected
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ 'a 'b 'c d])
#+END_SRC

#+RESULTS:
: [+ (quote a) (quote b) (quote c) d]
Nope... Maybe if I put parentheses around the leters
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ (a) (b) (c) d])
#+END_SRC

#+RESULTS:
: [+ (a) (b) (c) d]
Nope... Maybe if I put a question mark before the leters
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ ?a ?b ?c d])
#+END_SRC

#+RESULTS:
: [+ 97 98 99 d]
Nope... I found this idea online
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ (symbol-value a) (symbol-value b) (symbol-value c) d])
#+END_SRC

#+RESULTS:
: [+ (symbol-value a) (symbol-value b) (symbol-value c) d]

Nope... maybe evaluation inside a vector just
doesn't work... but can I grab the value of 'a'
from the vector ?
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) (aref [+ a b c d] 2))
#+END_SRC

#+RESULTS:
: b

Nope... something else I found online
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ a-val b-val c-val d])
#+END_SRC

#+RESULTS:
: [+ a-val b-val c-val d]

Nope... something else I found online
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) [+ ,a ,b ,c d])
#+END_SRC

#+RESULTS:
: [+ (\, a) (\, b) (\, c) d]

Nope... something else I found online - trying to convert to list first
#+BEGIN_SRC emacs-lisp
  (symbol-value (let ((a 1) (b 2) (c 3)) (elt (append [+ a b c d] nil) 1)))
#+END_SRC

#+RESULTS:
: a

Nope, I guess it is an impossibilty, at least with my current knowledge
of things as they are.

*** Problem 4
**** Predict
a = 1,
b = 2,
c = 3,
+ = 4?

this block of code will not evalute correctly 
vecause of the + at the end
**** Verify
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3) (+ 4)) (+ a b c +))
#+END_SRC

#+RESULTS:
: 10
I was wrong.

**** Ponder
we defined the the sybmol-value of + to be 4

*** Problem 5
**** Predict
make a unbound - remove previous value of a?
               - make a have infinite scope?
a = 1,
b = 2,
c = 3,
d = 5,

add a, b, c, and d together
**** Verify
#+BEGIN_SRC emacs-lisp
  (makunbound 'a)
  (let ((a 1) (b 2) (c 3) (d (+ a 4))) (+ a b c d))
#+END_SRC
I was wrong 
 - Sybmol's value as variable is void: a
Or I just did not understand all of it.

**** Ponder
(makunbound) does clear the previous value,
but we cannot use 'a' inside of the bindings 
for the (let) method in order to define 
another variable.
#+BEGIN_SRC emacs-lisp
  (makunbound 'a)
  (setq a 1)
  (let ((a 1) (b 2) (c 3) (d (+ a 4))) (+ a b c d))
#+END_SRC

#+RESULTS:
: 11

*** Problem 6
**** Predict
I predict this special definition of
let will allow it's previous bindings 
to be used in the deffinitions of it's
other bindings
**** Verify
#+BEGIN_SRC emacs-lisp
  (let* ((a 1) (b 2) (c 3) (d (+ a 4))) (+ a b c d))
#+END_SRC

#+RESULTS:
: 11
I was correct!

**** Ponder
let* must work as i expected it to

** DONE TEJ
   CLOSED: [2018-05-12 Sat 18:06]
  :LOGBOOK:
  CLOCK: [2018-05-12 Sat 17:16]--[2018-05-12 Sat 18:06] =>  0:50
  :END:
#+begin_note
  A function-as-association between elements of a domain and elements of a
  codomain, for \ldquo{}small\rdquo domains and codomains, inspired so-called \ldquo{}association
  lists\rdquo (or alists) and the =assoc= (and associated) functions.

  =(assoc KEY LIST)= returns non-nil if KEY is \ldquo{}equal\rdquo to the first element of
  an element of LIST. The value is actually the first element of LIST whose
  first element equals KEY.
  
  For example, here is a function that uses an alist to look up the RGB values
  of a given color name:

#+BEGIN_SRC emacs-lisp :results silent
  (defun lookup-rgb (color-name)
    (rest (assoc color-name
                 '(("red" 255 0 0) ("green" 0 255 0) ("blue" 0 0 255)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results raw
  (lookup-rgb "blue")
#+END_SRC

#+RESULTS:
(0 0 255)

: (0 0 255)

  What if the color name is not in the alist?

#+BEGIN_SRC emacs-lisp :results raw
  (lookup-rgb "grue")
#+END_SRC

#+RESULTS:
nil

: nil

  There are several variations of =assoc=. Find and give examples of using them.
#+end_note

#+begin_info
assoc-if 
#+BEGIN_SRC elisp :results raw
  (setq animals '(("dogs" bark) ("cats" meow) ("snakes" hiss)))
  (cdr (assoc-if #'(lambda (x) (string= "dogs" x)) animals))
#+END_SRC

#+RESULTS:
(bark)

assoc-if-not
#+BEGIN_SRC elisp :results raw
  (setq animals '(("dogs" bark) ("cats" meow) ("snakes" hiss)))
  (car (assoc-if-not #'(lambda (x) (string= "dogs" x)) animals))
#+END_SRC

#+RESULTS:
cats

assq - variation of assoc, but does 
not work if keys are "like this"
#+BEGIN_SRC elisp
  (setq animals '((dogs . bark) (cats . meow) (snakes . hiss)))
  (cdr (assq 'dogs animals))
#+END_SRC

#+RESULTS:
: bark

rassq - variation that uses 
the "value" to do a look up 
rather than the "key"
#+BEGIN_SRC elisp
  (setq animals '((dogs . bark) (cats . meow) (snakes . hiss)))
  (car (rassq 'bark animals))
#+END_SRC

#+RESULTS:
: dogs

rassoc - variation that uses 
the "value" to do a look up 
rather than the "key"
#+BEGIN_SRC elisp
  (setq animals '((dogs . bark) (cats . meow) (snakes . hiss)))
  (car (rassoc 'bark animals))
#+END_SRC

#+RESULTS:
: dogs

#+end_info
** DONE WFK
   CLOSED: [2018-05-12 Sat 18:29]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 18:05]--[2018-05-12 Sat 18:29] =>  0:24
   :END:
#+begin_note
  In the function-as-map context, here is another interpretation:

  A \ldquo{}map\rdquo type (AKA associative array, AKA hashtable) is found in many
  languages. For example, C++:
#+BEGIN_SRC C++ :results output
  #include <iostream>
  #include <map>
  using namespace std;

  int main() {
     map<string, string> mymap;

     mymap["one"] = "red";
     mymap["two"] = "blue";
     mymap["three"] = "green";

     for (auto const &ent1 : mymap) {
        cout << ent1.first << " : " << ent1.second << endl;
     }
  }
#+END_SRC

#+RESULTS:
: one : red
: three : green
: two : blue

: one : red
: three : green
: two : blue

  And python:
#+BEGIN_SRC python :results output
  mymap = {}

  mymap["one"] = "red"
  mymap["two"] = "blue"
  mymap["three"] = "green"

  if __name__ == "__main__":
          for key in mymap.keys():
                  print( key + " : " + str(mymap[key]))
#+END_SRC

#+RESULTS:
: one : red
: two : blue
: three : green

: three : green
: two : blue
: one : red

  And of course elisp:
#+BEGIN_SRC emacs-lisp :results output
  (let* ((mymap (make-hash-table :test 'equal)))
    (puthash "one" "red" mymap)
    (puthash "two" "blue" mymap)
    (puthash "three" "green" mymap)
    (pp (list (gethash "one" mymap)
              (gethash "two" mymap)
              (gethash "three" mymap)))
    (maphash (lambda (key value) (princ (format "%s : %s\n" key value))) mymap))
#+END_SRC

#+RESULTS:
: ("red" "blue" "green")
: one : red
: two : blue
: three : green

: ("red" "blue" "green")
: one : red
: two : blue
: three : green

  What happens if you omit the =:test 'equal= parameters to the
  =make-hash-table= call?
#+end_note
#+begin_info
Without the ":test 'equal" parameter 
the "heading" displayed results in
a list of nil
#+BEGIN_SRC emacs-lisp :results output
  (let* ((mymap (make-hash-table)))
    (puthash "one" "red" mymap)
    (puthash "two" "blue" mymap)
    (puthash "three" "green" mymap)
    (pp (list (gethash "one" mymap)
              (gethash "two" mymap)
              (gethash "three" mymap)))
    (maphash (lambda (key value) (princ (format "%s : %s\n" key value))) mymap))
#+END_SRC

#+RESULTS:
: (nil nil nil)
: one : red
: two : blue
: three : green

#+end_info
** DONE TER
   CLOSED: [2018-05-12 Sat 18:54]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 18:30]--[2018-05-12 Sat 18:53] =>  0:23
   :END:
#+begin_note
  This exercise explores /looping/ versus /mapping/.

  What does the =morphify= function defined below do? Think about it, then PVP
  the result of the call to it that follows.

#+BEGIN_SRC emacs-lisp :results silent
  (defun morphify (fun lst)
    (loop for item in lst
          collect (funcall fun item)))
#+END_SRC

  Note the quotes:

#+BEGIN_SRC emacs-lisp :results raw
  (morphify (quote downcase) (quote ("THIS" "IS" "TOO" "LOUD")))
#+END_SRC

  The =morphify= function is essentially a /mapping/ function, which means it
  takes a passed-in function (=fun=) and a passed-in list (=lst=), and /maps fun
  over lst/, i.e., the results of calling the function =fun= on each element of
  the list =lst= are collected into a new list, which is returned.

  This shows one way (iteratively) a /map/ function could be implemented.
  Another way is /recursively/, as in:

#+BEGIN_SRC emacs-lisp :results silent
  (defun morphifyr (fun lst)
    (if (null lst)
        nil
      (append (list (funcall fun (first lst))) (morphifyr fun (rest lst)))))
#+END_SRC

  Explain how this version of =morphify= works.
#+end_note
#+begin_info
 - Predict ::
    this function takes in a list of lists and
    collects the different parts of it into a
    new "morphed" list.
 - Verify ::
    #+BEGIN_SRC emacs-lisp :results silent
      (defun morphify (fun lst)
        (loop for item in lst
              collect (funcall fun item)))
    #+END_SRC
    
    #+BEGIN_SRC emacs-lisp :results raw
      (morphify (quote downcase) (quote ("THIS" "IS" "TOO" "LOUD")))
    #+END_SRC

    #+RESULTS:
    (this is too loud)

   This did not at all do what I thought it would
   I think I should have studied it more
   thouroughly.
 - Ponder ::
   After looking through the begining of the note, and looking
   more carefully at the code, i can now see that morphify is meant
   to perform a single action on larger sets of data.
 - Recursive Version :: 
      The recursive version takes in a funtion and 
      a list still, but instead of doing a loop 
      through each item in the list, it looks to
      see if the list is null, then then it morfs 
      the first item, and appends that item with 
      the morphed version of the rest of the list

      example:
      morphify downcase (THIS IS ALL I WANT)
      morphify does this first
      "this" then appends it with 
      morphify downcase (IS ALL I WANT)
      then the recusively called function does this
      "is" then appends it with
      morphify downcase (ALL I WANT)

      this contines untill the whole list has been gone through
      once it has this happens
      "want" is appended to "i"
      "i want" is appended to "all"
      "all i want" is appended to "is"
      and finally
      "is all i want" is appended to "this"
      to produce
      this is all i want

#+end_info
** DONE TGE
   CLOSED: [2018-05-12 Sat 18:58]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 18:54]--[2018-05-12 Sat 18:58] =>  0:04
   :END:
#+begin_note
  Note the difference if -13 is used instead of 13 below:
#+BEGIN_SRC emacs-lisp :results silent
  (defun compute-floor-the-hard-way (dividend divisor)
    (- (/ dividend (float divisor)) (/ (mod dividend divisor) (float divisor))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((number (/ -13 4.0))
         (floor1 (floor number))
         (floor2 (compute-floor-the-hard-way -13 4.0)))
    (list number floor1 floor2))
#+END_SRC

#+RESULTS:
(-3.25 -4 -4.0)
(3.25 3 3.0)

: (3.25 3 3.0)

  Is the hard way correct?
#+end_note
#+begin_info
  The hard way does produce the same values as the 
  floor method.

  When there a negative it rounds down.
#+end_info
** DONE THP
   CLOSED: [2018-05-14 Mon 16:57]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 17:00]--[2018-05-14 Mon 17:14] =>  0:14
   CLOCK: [2018-05-14 Mon 16:50]--[2018-05-14 Mon 16:57] =>  0:07
   CLOCK: [2018-05-12 Sat 19:00]--[2018-05-12 Sat 20:07] =>  1:07
   :END:
#+begin_note
  Graph the floor and ceiling functions f(x) = \lfloor{}x\rfloor and f(x) = \lceil{}x\rceil for real
  number values of x in the interval [-5.0 .. 5.0].
#+end_note

#+BEGIN_SRC elisp :results drawer
  (defun fl-cl ()
    (loop for x in (number-sequence -5 5 .1)
      collect
      (list x (floor x) (ceiling x))))

  (fl-cl)
#+END_SRC

#+RESULTS:
:RESULTS:
((-5 -5 -5) (-4.9 -5 -4) (-4.8 -5 -4) (-4.7 -5 -4) (-4.6 -5 -4) (-4.5 -5 -4) (-4.4 -5 -4) (-4.3 -5 -4) (-4.2 -5 -4) (-4.1 -5 -4) (-4.0 -4 -4) (-3.9 -4 -3) (-3.8 -4 -3) (-3.7 -4 -3) (-3.5999999999999996 -4 -3) (-3.5 -4 -3) (-3.4 -4 -3) (-3.3 -4 -3) (-3.2 -4 -3) (-3.0999999999999996 -4 -3) (-3.0 -3 -3) (-2.9 -3 -2) (-2.8 -3 -2) (-2.6999999999999997 -3 -2) (-2.5999999999999996 -3 -2) (-2.5 -3 -2) (-2.4 -3 -2) (-2.3 -3 -2) (-2.1999999999999997 -3 -2) (-2.0999999999999996 -3 -2) (-2.0 -2 -2) (-1.9 -2 -1) (-1.7999999999999998 -2 -1) (-1.6999999999999997 -2 -1) (-1.5999999999999996 -2 -1) (-1.5 -2 -1) (-1.4 -2 -1) (-1.2999999999999998 -2 -1) (-1.1999999999999997 -2 -1) (-1.0999999999999996 -2 -1) (-1.0 -1 -1) (-0.8999999999999995 -1 0) (-0.7999999999999998 -1 0) (-0.7000000000000002 -1 0) (-0.5999999999999996 -1 0) (-0.5 -1 0) (-0.39999999999999947 -1 0) (-0.2999999999999998 -1 0) (-0.1999999999999993 -1 0) (-0.09999999999999964 -1 0) (0.0 0 0) (0.10000000000000053 0 1) (0.20000000000000018 0 1) (0.3000000000000007 0 1) (0.40000000000000036 0 1) (0.5 0 1) (0.6000000000000005 0 1) (0.7000000000000002 0 1) (0.8000000000000007 0 1) (0.9000000000000004 0 1) (1.0 1 1) (1.1000000000000005 1 2) (1.2000000000000002 1 2) (1.3000000000000007 1 2) (1.4000000000000004 1 2) (1.5 1 2) (1.6000000000000005 1 2) (1.7000000000000002 1 2) (1.8000000000000007 1 2) (1.9000000000000004 1 2) (2.0 2 2) (2.1000000000000005 2 3) (2.2 2 3) (2.3000000000000007 2 3) (2.4000000000000004 2 3) (2.5 2 3) (2.6000000000000005 2 3) (2.7 2 3) (2.8000000000000007 2 3) (2.9000000000000004 2 3) (3.0 3 3) (3.0999999999999996 3 4) (3.200000000000001 3 4) (3.3000000000000007 3 4) (3.4000000000000004 3 4) (3.5 3 4) (3.5999999999999996 3 4) (3.700000000000001 3 4) (3.8000000000000007 3 4) (3.9000000000000004 3 4) (4.0 4 4) (4.1 4 5) (4.200000000000001 4 5) (4.300000000000001 4 5) (4.4 4 5) (4.5 4 5) (4.600000000000001 4 5) (4.700000000000001 4 5) (4.800000000000001 4 5) (4.9 4 5) (5.0 5 5))
:END:

[[file:../img/Graph-Floor-Ceiling.jpg]]

** DONE WKM
   CLOSED: [2018-05-12 Sat 20:23]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 20:11]--[2018-05-12 Sat 20:22] =>  0:11
   :END:
#+begin_note
  Which of these statements about floor and ceiling are correct, for any real
  number $x$ and any integers $n$ and $m$?
  1. $x - 1 < \lfloor{}x\rfloor \le x \le \lceil{}x\rceil < x + 1$.
  2. $\lfloor{}-x\rfloor = -\lceil{}x\rceil$.
  3. $\lceil{}-x\rceil = -\lfloor{}x\rfloor$.
  4. $\lfloor{}x + n\rfloor = \lfloor{}x\rfloor + n$.
  5. $\lceil{}x + n\rceil = \lceil{}x\rceil + n$.
  6. $\lfloor{}\frac{n}{2}\rfloor + \lceil{}\frac{n}{2}\rceil = n$.
  7. $\lfloor{}\frac{n}{2}\rfloor + \lfloor{}\frac{n + 1}{2}\rfloor = n$.
  8. $\lceil{}\frac{n}{2}\rceil + \lceil{}\frac{n + 1}{2}\rceil = n$.
  9. $\lfloor{}\frac{n + m}{2}\rfloor + \lceil{}\frac{n - m + 1}{2}\rceil = n$ (for any $m$, not just $m =
     0$ as in statement 7).
  10. $\lceil{}\frac{n + m}{2}\rceil + \lceil{}\frac{n - m + 1}{2}\rceil = n$ (for any $m$, not just $m =
      0$ as in statement 8).
#+end_note
#+begin_info
  1. t
  2. nil
  3. nil
  4. t
  5. t
  6. t
  7. t
  8. nil
  9. t
  10. nil
#+end_info
** DONE TIW
   CLOSED: [2018-05-12 Sat 20:40]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 20:30]--[2018-05-12 Sat 20:40] =>  0:10
   :END:
#+begin_note
  Define the function \ldquo{}round to nearest integer\rdquo using the floor and ceiling
  functions, together with the \ldquo{}Iverson bracket\rdquo function. (A number whose
  fractional part is less than one-half should be rounded down, otherwise up.)
#+end_note
#+begin_info
Iverson bracket function - true or false
     aka: if statement
     it works really well.
#+BEGIN_SRC elisp :results silent
  (defun round-to-nearest-int (x)
    (if (< (- x (floor x)) .5)
      (floor x)
      (ceiling x)))
#+END_SRC

#+BEGIN_SRC elisp
  (round-to-nearest-int -3.2)
#+END_SRC

#+RESULTS:
: -3

#+end_info
** DONE TKG
   CLOSED: [2018-05-12 Sat 20:50]
   :LOGBOOK:
   CLOCK: [2018-05-12 Sat 20:45]--[2018-05-12 Sat 20:50] =>  0:05
   :END:
#+begin_note
  Explore the inverse of =assoc= via the functions =rassoc= and associates.
#+end_note
#+begin_info
#+BEGIN_SRC elisp
  (setq mylist '((one . 1) (2 . two) (3 . "three")))
  (list
    (rassoc 'two mylist)
    (rassoc-if #'stringp mylist)
    (rassoc-if-not #'vectorp mylist)
  )
#+END_SRC

#+RESULTS:
: ((2 . two) (3 . three) (one . 1))

#+end_info
** DONE WOV
   CLOSED: [2018-05-14 Mon 17:40]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 17:25]--[2018-05-14 Mon 17:40] =>  0:15
   CLOCK: [2018-05-14 Mon 17:00]--[2018-05-14 Mon 17:21] =>  0:21
   :END:
#+begin_note
  Identify the formula or rule that generates the terms of each sequence:
  1. =[7 14 21 28 35 42 49 56 63 70 ...]=
  2. =[7 11 15 19 23 27 31 35 39 43 ...]=
  3. =[3 4 6 9 13 18 24 31 39 48 ...]=
  4. =[1 10 11 100 101 110 111 1000 1001 1010 ...]=
  5. =[1 1 2 3 5 8 13 21 34 55 ...]=
  6. =[7 22 11 34 17 52 26 13 40 20 ...]=
  7. =[2 1 3 4 7 11 18 29 47 76 ...]=
  8. =[6 12 24 48 96 192 384 768 1536 3072 ...]=
  9. =[6 18 54 162 486 1458 4374 13122 39366 118098 ...]=
  10. =[2 3 5 7 11 13 17 19 23 29 ...]=
#+end_note
#+begin_info
  1. add 7 times it's position (7 * n) n starts at 1
  2. add four to the previous number starting at 7
     7 + (4 * (n - 1)) n starting at 1
  3. 3 + \sum(n_-1 +n)
  4. binary counting
  5. fibonacci
  6. if current number even half it, else multiply by 3 and add one. (hailstone numbers)
  7. lucas numbers  - starting at the thrid term add the previous 2 numbers - frist two are 2 1
  8. double the previous number starting at 6 n_n = n_-1 * 2
  9. triple double the previous number starting at 6 n_n = n_-1 * 3
  10. prime numbers
#+end_info
** DONE WQW
   CLOSED: [2018-05-14 Mon 17:27]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 17:20]--[2018-05-14 Mon 17:27] =>  0:00
   :END:
#+begin_note
  Classify the following lisp functions according as each is or is not a predicate:
  | Predicate? | Yes or No? |
  |------------+------------|
  | =list=     |            |
  | =listp=    |            |
  | =integerp= |            |
  | =vector=   |            |
  | =vectorp=  |            |
  | =symbolp=  |            |
  | =zerop=    |            |
  | =evenp=    |            |
  | =oddp=     |            |
#+end_note
#+begin_info
  | Predicate? | Yes or No? |
  |------------+------------|
  | =list=     | yes        |
  | =listp=    | no         |
  | =integerp= | no         |
  | =vector=   | yes        |
  | =vectorp=  | no         |
  | =symbolp=  | no         |
  | =zerop=    | yes        |
  | =evenp=    | yes        |
  | =oddp=     | yes        |
#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** TODO TBD *
#+begin_note
  A function is one-to-one if and only if it is onto, /provided/ its domain and
  codomain are the same size.

  Put this statement in symbolic form using the adjectives /injective/ and
  /surjective/, and argue for its truth using the following formal definitions:

  A function from domain A to codomain B

  f : A \rarr B

  is
  - injective :: if f(m) \ne f(n) whenever m \ne n, for all m \in A and for all n \in A;

  and/or is
  - surjective :: if for all b \in B there exists an a \in A such that f(a) = b.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WDK *
#+begin_note
  Venture further into the /quote/ \ldquo{}macro\rdquo in lisp, used to \ldquo{}suppress\rdquo
  evaluation of symbols, lists and other things. Explore the difference between
  /set/, /setq/ and /setf/ --- /setf/ being another Common Lisp macro (hence the
  need to =(require 'cl)=, as with =loop=) --- and note which feature of
  functional programming is being flouted in this code:

#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (set 'a 'one)
  (setq a (quote one))
  (setf b '(one two))
  (setf a (first b))
  (setf (second b) a)
#+END_SRC
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE TEH
   CLOSED: [2018-05-14 Mon 15:58]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 15:55]--[2018-05-14 Mon 15:57] =>  0:02
   :END:
  Important: see Exercise WDT for context.
#+begin_note
  Could you get by without this star-suffixed form? How?
#+end_note
#+begin_info
  You can, you would just have to nest let statements.
#+BEGIN_SRC emacs-lisp
  (let ((a 1) (b 2) (c 3)) (let ((d (+ a 4))) (+ a b c d)))
#+END_SRC

#+RESULTS:
: 11

#+end_info
** TODO WFC
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 15:58]--[2018-05-14 Mon 15:59] =>  0:01
   :END:
#+begin_note
  Remembering that these are functions, do the four basic math operators (=+=,
  =-=, =*=, =/=) work as you might expect?

  How about when the number of operands
  - is greater than two?
  - is less than two (i.e., one or zero)?

  This is a good time to mention that functions with arity /n/ for /n/ = 1
  (unary) and /n/ = 2 (binary) have alternate type names, as does a generic
  classification for /n/ > 2:

  | Arity | Type     |
  |-------+----------|
  |     1 | Monadic  |
  |     2 | Dyadic   |
  |   > 2 | Polyadic |

  Argue for /polyadic/ to mean having /arbitrary arity/ (taking 0 /or more/
  arguments).
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WGP
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 15:59]--[2018-05-14 Mon 16:00] =>  0:01
   :END:
  Important: see Exercise TER for context.
#+begin_note
  The =morphify= function already exists by the name =mapcar=, and there are
  several variations and embodiments of this /map/ feature, as you will learn
  (and one of which you have already seen --- where?).

  Write a short (one-line body) lisp function named /vector-to-string/
  that takes a vector of symbols and converts it into a single string of the
  symbols\rsquo{} names separated by a space. for example,

#+BEGIN_SRC emacs-lisp
  (format "%s" (vector-to-string [a b c]))
#+END_SRC

  should give

: "a b c"

:HINT:
  - Hint ::
#+BEGIN_SRC emacs-lisp
  (let ((info '(("harry" male 42)
                ("larry" male 31)
                ("curly" male 29)
                ("shirley" female 30))))
    (mapconcat 'first info "\n"))
#+END_SRC
:END:
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO WGW *
#+begin_note
  Prefix notation takes some getting used to. Converting an expression from
  prefix to infix, to make arithmetic look more \ldquo{}natural\rdquo, is as easy as
  swapping the first two elements of a three-element list; e.g., =(+ 1 2)=
  becomes =(1 + 2)=. But what if the expression has other expressions nested
  within it, e.g., =(- 10 (* 2 3))=, where one (or both) of the operands is
  another 3-element (prefix expression) list? Recursively applying the swapping
  rule is the answer!

  Study the =prefix->infix= function and the three sample calls to it. Describe
  how it works. Try it on more complex expressions. Re-implement it without
  using =let= or =cond= (use =if=).
#+BEGIN_SRC emacs-lisp :results silent
  (defun prefix->infix (pre)
    (cond ((listp pre)
           (or (= 3 (length pre)) (error "not a 3-length list"))
           (let ((operator (nth 0 pre))
                 (operand1 (nth 1 pre))
                 (operand2 (nth 2 pre)))
             (list (prefix->infix operand1)
                   operator
                   (prefix->infix operand2))))
          (t pre)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results raw
  (prefix->infix '(+ 1 2))
#+END_SRC

: (1 + 2)

#+BEGIN_SRC emacs-lisp :results raw
  (prefix->infix '(+ 1 (* 2 3)))
#+END_SRC

: (1 + (2 * 3))

#+BEGIN_SRC emacs-lisp :results raw
  (prefix->infix '(+ (/ 1 4) (* 2 3)))
#+END_SRC

: ((1 / 4) + (2 * 3))
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** TODO TFV *
#+begin_note
  Implement and test an =infix->prefix= function.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE WJS
   CLOSED: [2018-05-14 Mon 16:04]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:00]--[2018-05-14 Mon 16:04] =>  0:04
   :END:
#+begin_note
  Describe an analogous situation to floor when taking the ceiling of negative
  numbers.
#+end_note
#+begin_info
  floor is similar to ceiling wne rounding for negative numbers
  because floor rounds down an integer, which when using 
  negative nubers would mean that some thing like -3.25
  we get -4, whereas when we have positive 3.25 we get 3
  by using floor. so floor is not so much rounding as
  it is choosing the lowest integer close to a number.
#+end_info
** DONE WKC
   CLOSED: [2018-05-14 Mon 16:08]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:05]--[2018-05-14 Mon 16:08] =>  0:03
   :END:
#+begin_note
  Define the \ldquo{}take the fractional part of\rdquo function =frac-part= in terms of
  =floor= as follows:

#+BEGIN_SRC emacs-lisp :results silent
  (defun frac-part (number)
    (- number (floor number)))
#+END_SRC

  For example,
#+BEGIN_SRC emacs-lisp
  (frac-part 3.14159)
#+END_SRC

: 0.14158999999999988

  Suppose =frac-part= were the primitive, built-in function. How would you
  define =floor= (assuming it were /not/ built-in) using =frac-part=?
#+end_note
#+begin_info
  frac-part takes a number and subtracts its floor (lowest close integer)
  in order to return the fractional part of a number.

  in order to find the floor, we would take the value, and subtract its
  fract-part
#+end_info
** DONE WNW
   CLOSED: [2018-05-14 Mon 16:10]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:08]--[2018-05-14 Mon 16:10] =>  0:02
   :END:
#+begin_note
  What conditions/restrictions on a function must be placed for it to be
  /invertible/ (have an inverse)?
#+end_note
#+begin_info
  In order for a function to have and inverse it must have a
  one-to-one mapping. If the function were to multiply by 0,
  the it would not have an inverse.
  all of it's operations must be reversible.
#+end_info
** DONE TMZ
   CLOSED: [2018-05-14 Mon 16:27]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:11]--[2018-05-14 Mon 16:27] =>  0:16
   :END:
#+begin_note
  Write elisp with loops and lambda predicates to answer the following:
  1. How many pairs of numbers between 1 and 1000 pass the predicate given by
     the following lambda expression? (lambda (m n) (= 1 (gcd m n)))
  2. How many solutions are there in integers to the equation 3x + 4y = 7?
  3. Each taken from the set [2 3 4 5 6 7 8 9], how many pairs of numbers are
     there that when multiplied together equal one more than a multiple of 11?
  4. How many pairs of numbers that when multiplied together equal one more than
     a multiple of 23 are found in the set [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
     17 18 19 20 21]?
  5. How many pairs of numbers that when multiplied together equal one more than
     a multiple of *9* are found in the set [2 3 4 5 6 7]?
#+end_note
#+begin_info
1.
#+BEGIN_SRC elisp :results drawer
  (defun one-to-thousand ()
    (loop for m from 1 to 1000
      for n from 1 to 1000
      collect 
        (if (lambda (m n) (= 1 (gcd m n)))
        (list m n)
        nil)))

  (one-to-thousand)
#+END_SRC

#+RESULTS:
:RESULTS:
((1 1) (2 2) (3 3) (4 4) (5 5) (6 6) (7 7) (8 8) (9 9) (10 10) (11 11) (12 12) (13 13) (14 14) (15 15) (16 16) (17 17) (18 18) (19 19) (20 20) (21 21) (22 22) (23 23) (24 24) (25 25) (26 26) (27 27) (28 28) (29 29) (30 30) (31 31) (32 32) (33 33) (34 34) (35 35) (36 36) (37 37) (38 38) (39 39) (40 40) (41 41) (42 42) (43 43) (44 44) (45 45) (46 46) (47 47) (48 48) (49 49) (50 50) (51 51) (52 52) (53 53) (54 54) (55 55) (56 56) (57 57) (58 58) (59 59) (60 60) (61 61) (62 62) (63 63) (64 64) (65 65) (66 66) (67 67) (68 68) (69 69) (70 70) (71 71) (72 72) (73 73) (74 74) (75 75) (76 76) (77 77) (78 78) (79 79) (80 80) (81 81) (82 82) (83 83) (84 84) (85 85) (86 86) (87 87) (88 88) (89 89) (90 90) (91 91) (92 92) (93 93) (94 94) (95 95) (96 96) (97 97) (98 98) (99 99) (100 100) (101 101) (102 102) (103 103) (104 104) (105 105) (106 106) (107 107) (108 108) (109 109) (110 110) (111 111) (112 112) (113 113) (114 114) (115 115) (116 116) (117 117) (118 118) (119 119) (120 120) (121 121) (122 122) (123 123) (124 124) (125 125) (126 126) (127 127) (128 128) (129 129) (130 130) (131 131) (132 132) (133 133) (134 134) (135 135) (136 136) (137 137) (138 138) (139 139) (140 140) (141 141) (142 142) (143 143) (144 144) (145 145) (146 146) (147 147) (148 148) (149 149) (150 150) (151 151) (152 152) (153 153) (154 154) (155 155) (156 156) (157 157) (158 158) (159 159) (160 160) (161 161) (162 162) (163 163) (164 164) (165 165) (166 166) (167 167) (168 168) (169 169) (170 170) (171 171) (172 172) (173 173) (174 174) (175 175) (176 176) (177 177) (178 178) (179 179) (180 180) (181 181) (182 182) (183 183) (184 184) (185 185) (186 186) (187 187) (188 188) (189 189) (190 190) (191 191) (192 192) (193 193) (194 194) (195 195) (196 196) (197 197) (198 198) (199 199) (200 200) (201 201) (202 202) (203 203) (204 204) (205 205) (206 206) (207 207) (208 208) (209 209) (210 210) (211 211) (212 212) (213 213) (214 214) (215 215) (216 216) (217 217) (218 218) (219 219) (220 220) (221 221) (222 222) (223 223) (224 224) (225 225) (226 226) (227 227) (228 228) (229 229) (230 230) (231 231) (232 232) (233 233) (234 234) (235 235) (236 236) (237 237) (238 238) (239 239) (240 240) (241 241) (242 242) (243 243) (244 244) (245 245) (246 246) (247 247) (248 248) (249 249) (250 250) (251 251) (252 252) (253 253) (254 254) (255 255) (256 256) (257 257) (258 258) (259 259) (260 260) (261 261) (262 262) (263 263) (264 264) (265 265) (266 266) (267 267) (268 268) (269 269) (270 270) (271 271) (272 272) (273 273) (274 274) (275 275) (276 276) (277 277) (278 278) (279 279) (280 280) (281 281) (282 282) (283 283) (284 284) (285 285) (286 286) (287 287) (288 288) (289 289) (290 290) (291 291) (292 292) (293 293) (294 294) (295 295) (296 296) (297 297) (298 298) (299 299) (300 300) (301 301) (302 302) (303 303) (304 304) (305 305) (306 306) (307 307) (308 308) (309 309) (310 310) (311 311) (312 312) (313 313) (314 314) (315 315) (316 316) (317 317) (318 318) (319 319) (320 320) (321 321) (322 322) (323 323) (324 324) (325 325) (326 326) (327 327) (328 328) (329 329) (330 330) (331 331) (332 332) (333 333) (334 334) (335 335) (336 336) (337 337) (338 338) (339 339) (340 340) (341 341) (342 342) (343 343) (344 344) (345 345) (346 346) (347 347) (348 348) (349 349) (350 350) (351 351) (352 352) (353 353) (354 354) (355 355) (356 356) (357 357) (358 358) (359 359) (360 360) (361 361) (362 362) (363 363) (364 364) (365 365) (366 366) (367 367) (368 368) (369 369) (370 370) (371 371) (372 372) (373 373) (374 374) (375 375) (376 376) (377 377) (378 378) (379 379) (380 380) (381 381) (382 382) (383 383) (384 384) (385 385) (386 386) (387 387) (388 388) (389 389) (390 390) (391 391) (392 392) (393 393) (394 394) (395 395) (396 396) (397 397) (398 398) (399 399) (400 400) (401 401) (402 402) (403 403) (404 404) (405 405) (406 406) (407 407) (408 408) (409 409) (410 410) (411 411) (412 412) (413 413) (414 414) (415 415) (416 416) (417 417) (418 418) (419 419) (420 420) (421 421) (422 422) (423 423) (424 424) (425 425) (426 426) (427 427) (428 428) (429 429) (430 430) (431 431) (432 432) (433 433) (434 434) (435 435) (436 436) (437 437) (438 438) (439 439) (440 440) (441 441) (442 442) (443 443) (444 444) (445 445) (446 446) (447 447) (448 448) (449 449) (450 450) (451 451) (452 452) (453 453) (454 454) (455 455) (456 456) (457 457) (458 458) (459 459) (460 460) (461 461) (462 462) (463 463) (464 464) (465 465) (466 466) (467 467) (468 468) (469 469) (470 470) (471 471) (472 472) (473 473) (474 474) (475 475) (476 476) (477 477) (478 478) (479 479) (480 480) (481 481) (482 482) (483 483) (484 484) (485 485) (486 486) (487 487) (488 488) (489 489) (490 490) (491 491) (492 492) (493 493) (494 494) (495 495) (496 496) (497 497) (498 498) (499 499) (500 500) (501 501) (502 502) (503 503) (504 504) (505 505) (506 506) (507 507) (508 508) (509 509) (510 510) (511 511) (512 512) (513 513) (514 514) (515 515) (516 516) (517 517) (518 518) (519 519) (520 520) (521 521) (522 522) (523 523) (524 524) (525 525) (526 526) (527 527) (528 528) (529 529) (530 530) (531 531) (532 532) (533 533) (534 534) (535 535) (536 536) (537 537) (538 538) (539 539) (540 540) (541 541) (542 542) (543 543) (544 544) (545 545) (546 546) (547 547) (548 548) (549 549) (550 550) (551 551) (552 552) (553 553) (554 554) (555 555) (556 556) (557 557) (558 558) (559 559) (560 560) (561 561) (562 562) (563 563) (564 564) (565 565) (566 566) (567 567) (568 568) (569 569) (570 570) (571 571) (572 572) (573 573) (574 574) (575 575) (576 576) (577 577) (578 578) (579 579) (580 580) (581 581) (582 582) (583 583) (584 584) (585 585) (586 586) (587 587) (588 588) (589 589) (590 590) (591 591) (592 592) (593 593) (594 594) (595 595) (596 596) (597 597) (598 598) (599 599) (600 600) (601 601) (602 602) (603 603) (604 604) (605 605) (606 606) (607 607) (608 608) (609 609) (610 610) (611 611) (612 612) (613 613) (614 614) (615 615) (616 616) (617 617) (618 618) (619 619) (620 620) (621 621) (622 622) (623 623) (624 624) (625 625) (626 626) (627 627) (628 628) (629 629) (630 630) (631 631) (632 632) (633 633) (634 634) (635 635) (636 636) (637 637) (638 638) (639 639) (640 640) (641 641) (642 642) (643 643) (644 644) (645 645) (646 646) (647 647) (648 648) (649 649) (650 650) (651 651) (652 652) (653 653) (654 654) (655 655) (656 656) (657 657) (658 658) (659 659) (660 660) (661 661) (662 662) (663 663) (664 664) (665 665) (666 666) (667 667) (668 668) (669 669) (670 670) (671 671) (672 672) (673 673) (674 674) (675 675) (676 676) (677 677) (678 678) (679 679) (680 680) (681 681) (682 682) (683 683) (684 684) (685 685) (686 686) (687 687) (688 688) (689 689) (690 690) (691 691) (692 692) (693 693) (694 694) (695 695) (696 696) (697 697) (698 698) (699 699) (700 700) (701 701) (702 702) (703 703) (704 704) (705 705) (706 706) (707 707) (708 708) (709 709) (710 710) (711 711) (712 712) (713 713) (714 714) (715 715) (716 716) (717 717) (718 718) (719 719) (720 720) (721 721) (722 722) (723 723) (724 724) (725 725) (726 726) (727 727) (728 728) (729 729) (730 730) (731 731) (732 732) (733 733) (734 734) (735 735) (736 736) (737 737) (738 738) (739 739) (740 740) (741 741) (742 742) (743 743) (744 744) (745 745) (746 746) (747 747) (748 748) (749 749) (750 750) (751 751) (752 752) (753 753) (754 754) (755 755) (756 756) (757 757) (758 758) (759 759) (760 760) (761 761) (762 762) (763 763) (764 764) (765 765) (766 766) (767 767) (768 768) (769 769) (770 770) (771 771) (772 772) (773 773) (774 774) (775 775) (776 776) (777 777) (778 778) (779 779) (780 780) (781 781) (782 782) (783 783) (784 784) (785 785) (786 786) (787 787) (788 788) (789 789) (790 790) (791 791) (792 792) (793 793) (794 794) (795 795) (796 796) (797 797) (798 798) (799 799) (800 800) (801 801) (802 802) (803 803) (804 804) (805 805) (806 806) (807 807) (808 808) (809 809) (810 810) (811 811) (812 812) (813 813) (814 814) (815 815) (816 816) (817 817) (818 818) (819 819) (820 820) (821 821) (822 822) (823 823) (824 824) (825 825) (826 826) (827 827) (828 828) (829 829) (830 830) (831 831) (832 832) (833 833) (834 834) (835 835) (836 836) (837 837) (838 838) (839 839) (840 840) (841 841) (842 842) (843 843) (844 844) (845 845) (846 846) (847 847) (848 848) (849 849) (850 850) (851 851) (852 852) (853 853) (854 854) (855 855) (856 856) (857 857) (858 858) (859 859) (860 860) (861 861) (862 862) (863 863) (864 864) (865 865) (866 866) (867 867) (868 868) (869 869) (870 870) (871 871) (872 872) (873 873) (874 874) (875 875) (876 876) (877 877) (878 878) (879 879) (880 880) (881 881) (882 882) (883 883) (884 884) (885 885) (886 886) (887 887) (888 888) (889 889) (890 890) (891 891) (892 892) (893 893) (894 894) (895 895) (896 896) (897 897) (898 898) (899 899) (900 900) (901 901) (902 902) (903 903) (904 904) (905 905) (906 906) (907 907) (908 908) (909 909) (910 910) (911 911) (912 912) (913 913) (914 914) (915 915) (916 916) (917 917) (918 918) (919 919) (920 920) (921 921) (922 922) (923 923) (924 924) (925 925) (926 926) (927 927) (928 928) (929 929) (930 930) (931 931) (932 932) (933 933) (934 934) (935 935) (936 936) (937 937) (938 938) (939 939) (940 940) (941 941) (942 942) (943 943) (944 944) (945 945) (946 946) (947 947) (948 948) (949 949) (950 950) (951 951) (952 952) (953 953) (954 954) (955 955) (956 956) (957 957) (958 958) (959 959) (960 960) (961 961) (962 962) (963 963) (964 964) (965 965) (966 966) (967 967) (968 968) (969 969) (970 970) (971 971) (972 972) (973 973) (974 974) (975 975) (976 976) (977 977) (978 978) (979 979) (980 980) (981 981) (982 982) (983 983) (984 984) (985 985) (986 986) (987 987) (988 988) (989 989) (990 990) (991 991) (992 992) (993 993) (994 994) (995 995) (996 996) (997 997) (998 998) (999 999) (1000 1000))
:END:

2.
Infinite amounts

3.

#+end_info
** DONE TNL
   CLOSED: [2018-05-14 Mon 16:29]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:28]--[2018-05-14 Mon 16:29] =>  0:01
   :END:
#+begin_note
  Explore the counterpart of \Sigma, the symbol used to collapse a /sum/ of terms;
  namely, the Greek letter (which?) used to collapse a /product/ of terms.
#+end_note
#+begin_info
  \prod is the symbol for the greek letter denoting product.
#+end_info
** TODO WRD
#+begin_note
  With at least two examples of a binary function, verify the nested summation
  interchange rule.
#+end_note
#+begin_info
  Your answer goes here.
#+end_info
** DONE TNQ
   CLOSED: [2018-05-14 Mon 16:33]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:30]--[2018-05-14 Mon 16:32] =>  0:02
   :END:
#+begin_note
  Consider the following function:

#+BEGIN_SRC emacs-lisp :results silent
  (defun calculate-pi-very-slowly (max-iterations)
    (* 4 (loop for n from 0 to max-iterations
               sum (/ 1.0 (* (+ (* 2 n) 1) (expt -1 n))))))
#+END_SRC

  How slow is \ldquo{}very slowly\rdquo?
#+end_note
#+begin_info
  log(n) is how slow the funnction runs
#+end_info
* Puzzles
** DONE TEU
   CLOSED: [2018-05-14 Mon 16:47]
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:40]--[2018-05-14 Mon 16:47] =>  0:07
   :END:
#+begin_note
  How many numbers between one and a million contain the digit 1 exactly once,
  and the sum of the rest of the digits is 16? Write elisp code with and without
  loops to verify your answer.
#+end_note
*** Rephrase
#+BEGIN_SRC elisp
  (defun sum-up (x)
    (loop for s in x
      (

  (defun contains-just-one (x)
    (

  (defun some-loop ()
    (loop for x from 1 to 1000000
      collect
      (if 
#+END_SRC

*** Approach
*** Solution
*** Proof
** TODO TME
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:36]--[2018-05-14 Mon 16:38] =>  0:02
   :END:
#+begin_note
  Sequences can be non-numeric as well. What is the pattern for this sequence?
: [m b w y me be wi yo met bew ith you meta bewi thyo uati metap bewit hyoua tirel]
  How long can it continue?
#+end_note
*** Rephrase
m
b
w
y
word that starts with m
word that starts with b
word that starts with w
word that starts with y
*** Approach
*** Solution
*** Proof

** TODO WRA
   :LOGBOOK:
   CLOCK: [2018-05-14 Mon 16:38]--[2018-05-14 Mon 16:39] =>  0:01
   :END:
#+begin_note
  Why is the sum of the reciprocals of the powers of two scaled by which power
  equal to two?
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
* DONE Identify Collaborators
  CLOSED: [2018-05-14 Mon 17:51]
  :LOGBOOK:
  CLOCK: [2018-05-14 Mon 17:45]--[2018-05-14 Mon 17:51] =>  0:06
  :END:
  Identify your collaborators and the contribution of each, in the following way:

  - Sawyer Gehring :: Helped me through some of the Problems.
